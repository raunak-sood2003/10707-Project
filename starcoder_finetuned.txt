Task_id: 0

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert has_close_elements([1.5, 1.2, 2.3, 2.1, 3.0, 4.1],0.5)==True
    assert has_close_elements([1,2,3,4,5],2)==False
    assert has_close_elements([1,0,2,4,5],1)==False

  def test2(self):
    # Tests the above function
    assert has_close_elements([1,2,3,4,5],2)==False
    assert has_close_elements([1.5,1.2,2.3,2.1,3.0,4.1],0.5)==True
    assert has_close_elements([1,0,2,4,5],1)==False

  def test2(self):
    # Tests the above function
    assert has_close_elements([1.5,1.2,2.3,2.1,3.0,4.1],0.5)==True

Task_id: 1


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
  def test1(self):
    assert separate_paren_groups("((())())())") == ['((()))', '()', '((()))']
    assert separate_paren_groups("((())())())") == ['((()))', '()', '((()))']
    assert separate_paren_groups("()()") == ['()', '()']

  def test2(self):
    # Tests the above function
    assert separate_paren_groups("((())())())") == ['((()))', '()', '((()))']
    assert separate_paren_groups("()()") == ['()', '()']
    assert separate_paren_groups("()()") == ['()', '()']


Task_id: 2


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert truncate_number(12.123456)==0.123456
    assert truncate_number(12.7)==0.7
    assert truncate_number(-12.123456)==-0.123456


Task_id: 3


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert below_zero([-1,1,-2,1]) == True
    assert below_zero([1,2,3]) == False
    assert below_zero([-1,-2,-3]) == True

  def test2(self):
    # Tests the above function
    assert below_zero([1,2,1,2]) == False
    assert below_zero([-2,-4,-6]) == True
    assert below_zero([2,4,6]) == False

Task_id: 4

class Tests(unittest.TestCase):
  def main(self):
    # Tests the above function
    assert mean_absolute_deviation([1,2,3]) == 1.6666666666666665
    assert mean_absolute_deviation([10,20,30]) == 16.333333333333332
    assert mean_absolute_deviation([15,9,55,41,35,20,62,49]) == 20.375

Task_id: 5

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[0,1])==[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10]
    assert intersperse([1,2,3],[4,5,6])==[1, 4, 2, 5, 3, 6]
    assert intersperse([1,2,3],[4,5])==[1, 4, 2, 5, 3]

  def test2(self):
    # Tests the above function
    assert intersperse([1,2,3],[4,5,6])==[1, 4, 2, 5, 3, 6]
    assert intersperse([1,2,3],[4,5])==[1, 4, 2, 5, 3]
    assert intersperse([1,2,3],[4,5,6])==[1, 4, 2, 5, 3, 6]

Task_id: 6

class Tests(unittest.TestCase):
  def test1(self):
	  # Tests the above function
    assert parse_nested_parens('((())())())') == [3, 3, 2, 2, 1]
    assert parse_nested_parens('((())())()) ((())())())') == [3, 3, 2, 2, 1, 3, 3, 2, 2, 1]
    assert parse_nested_parens('((())())()) ((())())()) ((())())()) ((())())())') == [3, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 2, 1]

Task_id: 7

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert filter_by_substring(["python", "exercises", "solution"], "ex")==['exercises']
    assert filter_by_substring(["python", "exercises", "solution"], "sol")==['solutions']
    assert filter_by_substring(["python", "exercises", "solution"], "py")==['python']

  def test2(self):
    # Tests the above function
    assert filter_by_substring(["python", "program", "language"], "pro")==['program']
    assert filter_by_substring(["python", "program", "language"], "ram")==['program']
    assert filter_by_substring(["python", "program", "language"], "lang")==['language']

  def test3(self):
    # Tests the above function
    assert filter_by_substring(["python", "program", "language"], "ram")==['program']
    assert filter_by_substring(["python", "program", "language"], "ram")==['program']
    assert filter_by_substring(["python", "program", "language"], "ram")==['program']

Task_id: 8

class Tests(unittest.TestCase):
  def test1(self):
  	# Tests the above function
    assert sum_product([1,-2,3]) == (-1, -6)
    assert sum_product([1,2,3]) == (6, 6)
    assert sum_product([4,5,6]) == (15, 24)

  def test2(self):
    # Tests the above function
    assert sum_product([1,2,3]) == (-1, -6)
    assert sum_product([1,2,3]) == (6, 6)
    assert sum_product([4,5,6]) == (15, 24)

Task_id: 9

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert rolling_max([1, 3, 7, 9, 10, 12, 15, 18, 20]) == [1, 3, 7, 9, 10, 12, 15, 18, 20]
    assert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert rolling_max([4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

Task_id: 10

class Tests(unittest.TestCase):
  def test1(self):
	  # Tests the above function
    assert is_palindrome("abc") == "abc"
    assert is_palindrome("abba") == "abba"
    assert is_palindrome("abcde") == "abcdea"

  def test2(self):
    # Tests the above function
    assert is_palindrome("rec") == "recc"
    assert is_palindrome("xyz") == "xyz"
    assert is_palindrome("data") == "adat"

Task_id: 11

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert string_xor("1111","0000") == "1111"
    assert string_xor("1010","1111") == "0101"
    assert string_xor("0101","1010") == "1111"

  def test2(self):
    # Tests the above function
    assert string_xor("1011","1110") == "0101"
    assert string_xor("1101","1011") == "0010"
    assert string_xor("1110","1101") == "0001"

  def test3(self):
    # Tests the above function
    assert string_xor("10101010","01010101") == "11111111"
    assert string_xor("10101010","10101010") == "00000000"
    assert string_xor("11111111","00000000") == "11111111"

  def test4(self):
    # Tests the above function
    assert string_xor("11111111","00000000") == "11111111"
    assert string_xor("00000000","11111111") == "11111111"
    assert string_xor("00000000","00000000") == "00000000"

Task_id: 12

class Tests(unittest.TestCase):
  def test1(self):
    # Tests the above function
    assert longest(["win","lose","great"]) == 'win'
    assert longest(["a","ab","abc"]) == 'abc'
    assert longest([]) == None

  def test2(self):
    # Tests the above function
    assert longest(["python","exercises","program"]) == 'exercises'
    assert longest(["java","language","programming"]) == 'language'
    assert longest([]) == None

  def test3(self):
    # Tests the above function
    assert longest(["indian","man","woman"]) == 'indian'
    assert longest(["red","black","white"]) == 'red'
    assert longest([]) == None

  def test4(self):
    # Tests the above function
    assert longest(["computer","phone","laptop"]) == 'computer'
    assert longest(["little","big","beautiful"]) == 'beautiful'
    assert longest([]) == None

  def test5(self):
    # Tests the above function
    assert longest(["data","science","ml"]) == 'data'
    assert longest(["a","ab","abc"]) == 'abc'
    assert longest([]) == None

  def test6(self):
    # Tests the above function
    assert longest(["python","exercises","program"]) == 'exercises'
    assert longest(["java","language","programming"]) == 'language'
    assert longest([]) == None

  def test7(self):
    # Tests the above function
    assert longest(["indian","man","woman"]) == 'indian'
    assert longest(["red","black","white"]) == 'red'
    assert longest([]) == None

  def test8(self):
    # Tests the above function
    assert longest(["computer","phone","laptop"]) == 'computer'
    assert longest(["little","big","beautiful"]) == 'beautiful'
    assert longest([]) == None

    def test9(self):
      # Tests the above function
      assert longest(["data","science","ml"]) == 'data'
      assert longest(["a","ab","abc"]) == 'abc'
      assert longest([]) == None

Task_id: 13


class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert greatest_common_divisor(12,18)==6
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150

  def test477(self):
    # Tests the above function
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150
    assert greatest_common_divisor(18,15)==3

  def test481(self):
    # Tests the above function
    assert greatest_common_divisor(12,18)==6
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150

  def test167(self):
    # Tests the above function
    assert greatest_common_divisor(18,15)==3
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150

  def test317(self):
    # Tests the above function
    assert greatest_common_divisor(12,18)==6
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150

  def test101(self):
    # Tests the above function
    assert greatest_common_divisor(18,15)==3
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150

  def test61(self):
    # Tests the above function
    assert greatest_common_divisor(12,18)==6
    assert greatest_common_divisor(10,20)==10
    assert greatest_common_divisor(190,450)==150
Task_id: 14

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert all_prefixes("python") == ['p', 'py', 'pyt', 'pyth', 'pytho', 'python']
    assert all_prefixes("data") == ['d', 'da', 'dat', 'data']
    assert all_prefixes("language") == ['l', 'la', 'lan', 'lang', 'lanu', 'langu', 'langua', 'languag', 'language']

  def test267(self):
    # Tests the above function
    assert all_prefixes("program") == ['p', 'pr', 'pro', 'prog', 'progr', 'progra', 'program']
    assert all_prefixes("solution") == ['s', 'so', 'sol', 'solu', 'solut', 'soluti', 'solution']
    assert all_prefixes("string") == ['s', 'st', 'str', 'strin', 'string']

  def test846(self):
    # Tests the above function
    assert all_prefixes("python") == ['p', 'py', 'pyt', 'pyth', 'pytho', 'python']
    assert all_prefixes("data") == ['d', 'da', 'dat', 'data']
    assert all_prefixes("language") == ['l', 'la', 'lan', 'lang', 'lanu', 'langu', 'langua', 'languag', 'language']

  def test687(self):
    # Tests the above function
    assert all_prefixes("program") == ['p', 'pr', 'pro', 'prog', 'progr', 'progra', 'program']
    assert all_prefixes("solution") == ['s', 'so', 'sol', 'solu', 'solut', 'soluti', 'solution']
    assert all_prefixes("string") == ['s', 'st', 'str', 'strin', 'string']

Task_id: 15

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert string_sequence(10)==('0 1 2 3 4 5 6 7 8 9 10')
    assert string_sequence(5)==('0 1 2 3 4 5')
    assert string_sequence(15)==('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15')

Task_id: 16

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert count_distinct_characters("Python") == 6
    assert count_distinct_characters("Data") == 4
    assert count_distinct_characters("Language") == 8

  def test224(self):
    # Tests the above function
    assert count_distinct_characters("Program") == 7

  def test458(self):
    # Tests the above function
    assert count_distinct_characters("Programming") == 8

  def test19(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test193(self):
    # Tests the above function
    assert count_distinct_characters("Python") == 6

  def test51(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test865(self):
    # Tests the above function
    assert count_distinct_characters("Language") == 8

  def test182(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test993(self):
    # Tests the above function
    assert count_distinct_characters("Programming") == 7

  def test943(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test575(self):
    # Tests the above function
    assert count_distinct_characters("Language") == 8

  def test294(self):
    # Tests the above function
    assert count_distinct_characters("Python") == 6

  def test890(self):
    # Tests the above function
    assert count_distinct_characters("Data") == 4

  def test140(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test428(self):
    # Tests the above function
    assert count_distinct_characters("Language") == 8

  def test354(self):
    # Tests the above function
    assert count_distinct_characters("Solution") == 6

  def test587(self):
    # Tests the above function
    assert count_distinct_characters("Python") == 6

  def test928(self):
    # Tests the above function
    assert count_distinct_characters("Data") == 4


Task_id: 17

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert parse_music('o| o| .| o| o| .|') == [4, 2, 1, 4, 4, 1]
    assert parse_music('o| o| .| o| o| .| o| o| .|') == [4, 2, 1, 4, 4, 1, 4, 4, 1]
    assert parse_music('o| o| .| o| o| .| o| o| .| o| o| .|') == [4, 2, 1, 4, 4, 1, 4, 4, 1, 4, 4, 1]

Task_id: 18

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert how_many_times("abcabcabc", "abc") == 3
    assert how_many_times("abcabce", "abc") == 2
    assert how_many_times("abcabc", "ab") == 2

    # Tests the above function
    assert how_many_times("123123123", "123") == 3
    assert how_many_times("123abce", "123") == 1
    assert how_many_times("123abc", "ab") == 1

Task_id: 19

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sort_numbers("nine eight six five three two one")==('one two three five eight nine six')
    assert sort_numbers("four three two one")==('one two three four')
    assert sort_numbers("six five four three two")==('two three four five six')

  def test2(self):
    # Tests the above function
    assert sort_numbers("zero nine eight seven six five four three two one")==('one two three four five六 seven eight 9 zero')
    assert sort_numbers("four three two")==('two three four')
    assert sort_numbers("six five four")==('four five six')

Task_id: 20

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert find_closest_elements([10, 20, 30, 40, 50, 60, 70, 80, 90]) == (40, 50)
    assert find_closest_elements([1, 5, 3, 19, 18, 25, 2, 12]) == (1, 25)
    assert find_closest_elements([36, 41, 56, 35, 44, 33, 34, 92, 43, 42, 46, 32, 40, 91, 49, 39, 48, 47, 19, 38]) == (32, 35)

Task_id: 21

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert rescale_to_unit([1,2,3]) == [0.0, 0.5, 1.0]
    assert rescale_to_unit([10,20,30]) == [0.3333333333333333, 0.6666666666666666, 1.0]
    assert rescale_to_unit([15,19,18]) == [0.4444444444444444, 0.8333333333333333, 0.8888888888888888]

Task_id: 22

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert filter_integers([1, 2, 'three', 4, 'five'])==[1, 2, 4]
    assert filter_integers([10,20,'30','40','50',60,'70',80])==[10, 20, 40, 60, 80]
    assert filter_integers(['a','b','c','d','e','f','g','h','i','j'])==['a', 'b', 'd', 'f', 'h', 'j']


  def test798(self):
    # Tests the above function
    assert filter_integers([1,2,3,4,5,6,7,8,9,10])==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert filter_integers(['x','y','z','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])==['x', 'y', 'z', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    assert filter_integers([25,35,45,55,65,75,85,95,105])==[25, 35, 45, 55, 65, 75, 85, 95, 105]

Task_id: 23

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert strlen('python')==6
    assert strlen('program')==7
    assert strlen('language')==8


  def test901(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('data')==4


  def test755(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('big')==3


  def test627(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('big')==3


  def test291(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('little')==6


  def test318(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('small')==5


  def test894(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('big')==3


  def test104(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('little')==6


  def test53(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('small')==5


  def test181(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('little')==6


  def test950(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('big')==3


  def test931(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('little')==6


  def test112(self):
    # Tests the above function
    assert strlen('program')==7
    assert strlen('language')==8
    assert strlen('big')==3


Task_id: 24

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert largest_divisor(10) == 2
    assert largest_divisor(15) == 3
    assert largest_divisor(26) == 13

  def test692(self):
    # Tests the above function
    assert largest_divisor(12) == 4
    assert largest_divisor(30) == 15
    assert largest_divisor(49) == 7

  def test993(self):
    # Tests the above function
    assert largest_divisor(13) == 13
    assert largest_divisor(34) == 17
    assert largest_divisor(43) == 43

  def test473(self):
    # Tests the above function
    assert largest_divisor(14) == 1
    assert largest_divisor(33) == 11
    assert largest_divisor(42) == 21

  def test980(self):
    # Tests the above function
    assert largest_divisor(18) == 18
    assert largest_divisor(36) == 18
    assert largest_divisor(45) == 9

  def test405(self):
    # Tests the above function
    assert largest_divisor(17) == 17
    assert largest_divisor(35) == 7
    assert largest_divisor(44) == 11

Task_id: 25

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert factorize(120) == [2, 2, 2, 3, 5]
    assert factorize(18) == [2, 3, 3]
    assert factorize(137) == [137]

  def test2(self):
    # Tests the above function
    assert factorize(100) == [2, 2, 5, 5]
    assert factorize(17) == [17]
    assert factorize(56) == [2, 2, 2, 7]

  def test3(self):
    # Tests the above function
    assert factorize(4) == [2, 2]
    assert factorize(9) == [3, 3]
    assert factorize(13) == [13]

  def test4(self):
    # Tests the above function
    assert factorize(36) == [2, 2, 3, 3]
    assert factorize(49) == [7, 7]
    assert factorize(10) == [2, 5]

  def test5(self):
    # Tests the above function
    assert factorize(24) == [2, 2, 2, 3]
    assert factorize(28) == [2, 2, 7]

Task_id: 26

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert remove_duplicates([0, 0, 1, 2, 3, 4, 4, -1, -2, -2, -1, 5, 5, 6, 6])==[0, 1, 2, 3, 4, -1, -2, 5, 6]
    assert remove_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 4, 4])==[1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert remove_duplicates([10, 15, 19, 18, 10, 17, 16, 10])==[10, 15, 19, 18, 17, 16]

  def test638(self):
    # Tests the above function
    assert remove_duplicates([1,2,3,1,2,4,5,6,6,7])==[1,2,3,4,5,6,7]
    assert remove_duplicates([1,2,3,4,4,5,6,6,7,8,9,4,4])==[1,2,3,4,5,6,7,8,9]
    assert remove_duplicates([10,15,19,18,10,17,16,10])==[10,15,19,18,17,16]

  def test675(self):
    # Tests the above function
    assert remove_duplicates([1,2,3,1,2,4,5,6,6,7])==[1,2,3,4,5,6,7]

Task_id: 27

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert flip_case("person") == "PERSON"
    assert flip_case("Python") == "python"
    assert flip_case("  assert") == "ASSERT"

  def test267(self):
    # Tests the above function
    assert flip_case("Programming") == "programming"
    assert flip_case("Language") == "language"
    assert flip_case("Assert") == "  assert"

  def test120(self):
    # Tests the above function
    assert flip_case("Data") == "DATA"
    assert flip_case("Available") == "Available"
    assert flip_case("Hadoop") == "HADOOP"

  def test282(self):
    # Tests the above function
    assert flip_case("Hadoop") == "HADOOP"
    assert flip_case("Hadoop") == "HADOOP"
    assert flip_case("Hadoop") == "HADOOP"

Task_id: 28

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert concatenate(["Python", "Exercises"]) == "PythonExercises"
    assert concatenate(["Program", "Language"]) == "ProgrammingLanguage"
    assert concatenate(["Python", "Solution"]) == "PythonSolution"

  def test2(self):
    # Tests the above function
    assert concatenate(["Programming", "Language"]) == "ProgrammingLanguage"
    assert concatenate(["Python", "Solution"]) == "PythonSolution"
    assert concatenate(["Data", "Analysis"]) == "DataAnalysis"


  def test3(self):
    assert concatenate(["Python", "Exercises"]) == "PythonExercises"
    assert concatenate(["Program", "Language"]) == "ProgrammingLanguage"
    assert concatenate(["Python", "Solution"]) == "PythonSolution"


  def test4(self):
    assert concatenate(["Data", "Analysis"]) == "DataAnalysis"
    assert concatenate(["DB", "A", "R", "S", "E", "C", "R", "E", "T", "E", "R", "S"]) == "DBARESHCTRERSTES"
    assert concatenate(["SQL", "Query", "Language"]) == "SQLQueryLanguage"


  def test5(self):
    # Tests the above function
    assert concatenate(["DB", "A", "R", "S", "E", "C", "R", "E", "T", "E", "R", "S"]) == "DBARESHCTRERSTES"
    assert concatenate(["SQL", "Query", "Language"]) == "SQLQueryLanguage"
    assert concatenate(["SQL", "Server", "Authentication", "Error"]) == "SQLServerAuthenticationError"

Task_id: 29

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert filter_by_prefix(["win","lose","great","awful"],"aw") == ['awful']
    assert filter_by_prefix(["red","black","white","blue"],"bl") == ['black','blue']
    assert filter_by_prefix(["python","java","C++"],"py") == ['python']

  def test784(self):
    # Tests the above function
    assert filter_by_prefix(["red","black","white","blue"],"bl") == ['black','blue']
    assert filter_by_prefix(["python","java","C++"],"py") == ['python']
    assert filter_by_prefix(["red","black","white","blue"],"bl") == ['black','blue']

  def test999(self):
    # Tests the above function
    assert remove_even([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]
    assert remove_even([1,5,7,2,4,6,8,0]) == [1,5,7,2,4,6,8]
    assert remove_even([10,15,14,13,-18,12,-20]) == [10,15,14,13,12]

  def test247(self):
    # Tests the above function
    assert remove_even([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]
    assert remove_even([10,15,14,13,-18,12,-20]) == [10,15,14,13,12]

Task_id: 30

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert get_positive([1,-2,3,-4]) == [1,3]
    assert get_positive([4,5,6,-7,8,-9]) == [4,5,6,8]
    assert get_positive([10,15,-14,13,-18,12,-20]) == [10,15,13,12]

  def test2(self):
# Unit tests for the above function
    assert get_negative([1,-2,3,-4]) == [-2,-4]
    assert get_negative([4,5,6,-7,8,-9]) == [-7,-9]
    assert get_negative([10,15,-14,13,-18,12,-20]) == [-14,-7,-9,-20]

  def test3(self):
# Unit tests for the above function
    assert get_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]
    assert get_odd([10,15,14,13,18,12,20]) == [10,14,12,18,20]
    assert get_odd([-6,-7,-14,-13,-18,-12,-20]) == [-6,-7,-14,-13,-18,-12,-20]

Task_id: 31

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_prime(11)==True
    assert is_prime(0)==False
    assert is_prime(-1111)==False

  def test105(self):
    # Tests the above function
    assert is_prime(13)==True
    assert is_prime(7)==True
    assert is_prime(-1310)==False

  def test311(self):
    # Tests the above function
    assert is_prime(4)==False
    assert is_prime(2)==True
    assert is_prime(-4100)==False

  def test763(self):
    # Tests the above function
    assert is_prime(101)==True
    assert is_prime(100)==False
    assert is_prime(-10100)==False

  def test530(self):
    # Tests the above function
    assert is_prime(8)==False
    assert is_prime(9)==False
    assert is_prime(-8900)==False

  def test202(self):
    # Tests the above function
    assert is_prime(1)==True
    assert is_prime(2)==True
    assert is_prime(-2000)==False

  def test84(self):
    # Tests the above function
    assert is_prime(121)==False
    assert is_prime(120)==False
    assert is_prime(-12100)==False

  def test331(self):
    # Tests the above function
    assert is_prime(151)==True
    assert is_prime(150)==False
    assert is_prime(-15100)==False

  def test853(self):
    # Tests the above function
    assert is_prime(170)==True
    assert is_prime(171)==False
    assert is_prime(-17100)==False

  def test55(self):
    # Tests the above function
    assert is_prime(181)==True
    assert is_prime(180)==False
    assert is_prime(-18100)==False

Task_id: 32

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert poly([1, 2, 3, 4, 5],2)==2.0
    assert poly([1, 2, 3, 4, 5],3)==3.0
    assert poly([1, 2, 3, 4, 5],6)==5.0

  def test451(self):
    # Tests the above function
    assert poly([1, 2, 3, 4, 5],7)==7.0
    assert poly([1, 2, 3, 4, 5],8)==8.0
    assert poly([1, 2, 3, 4, 5],9)==9.0

  def test222(self):
    # Tests the above function
    assert poly([1, 2, 3, 4, 5],10)==10.0
    assert poly([1, 2, 3, 4, 5],11)==11.0
    assert poly([1, 2, 3, 4, 5],12)==12.0

  def test488(self):
    # Tests the above function
    assert poly([1, 2, 3, 4, 5],13)==13.0
    assert poly([1, 2, 3, 4, 5],14)==14.0
    assert poly([1, 2, 3, 4, 5],15)==15.0

  def test278(self):
    # Tests the above function
    assert poly([1, 2, 3, 4, 5],16)==16.0

Task_id: 33

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sort_third([(1, 3), (5, 7), (9, 11), (13, 15), (17, 19)])==[(13, 15), (1, 3), (5, 7), (9, 11), (17, 19)]
    assert sort_third([(1, 2), (4, 6), (8, 9), (12, 14), (16, 18)])==[(12, 14), (1, 2), (4, 6), (8, 9), (16, 18)]
    assert sort_third([(2, 5), (6, 8), (10, 12), (14, 16), (18, 20)])==[(14, 16), (2, 5), (6, 8), (10, 12), (18, 20)]

  def test182(self):
    # Tests the above function
    assert sort_third([(3, 7), (9, 11), (15, 17), (19, 21), (23, 25)])==[(19, 21), (3, 7), (9, 11), (15, 17), (23, 25)]
    assert sort_third([(4, 8), (10, 12), (16, 18), (20, 22), (26, 28)])==[(16, 18), (4, 8), (10, 12), (20, 22), (26, 28)]

Task_id: 34

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert unique([10, 5, 2, 2, 3, 6, 9, 5]) == [2, 3, 5, 6, 9, 10]
    assert unique([1, 0, -1, -2, 0, -1, 4, 4, -2, 4, -1, 1]) == [-2, -1, 0, 1, 4]
    assert unique([1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]

  def test68(self):
    # Tests the above function
    assert unique([1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert unique([10, 5, 2, 2, 3, 6, 9, 5]) == [2, 3, 5, 6, 9, 10]
    assert unique([1, 0, -1, -2, 0, -1, 4, 4, -2, 4, -1, 1]) == [-2, -1, 0, 1, 4]

  def test279(self):
    # Tests the above function
    assert unique([1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]

Task_id: 35

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test12(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test973(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test152(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test303(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test986(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

  def test770(self):
    # Tests the above function
    assert max_element([1,2,3]) == 3
    assert max_element([10,20,30]) == 30
    assert max_element([15,19,18]) == 19

Task_id: 36

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test883(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test416(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test3(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test62(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test405(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

  def test586(self):
    # Tests the above function
    assert fizz_buzz(13)==1
    assert fizz_buzz(100)==33
    assert fizz_buzz(4)==0

Task_id: 37

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert sort_even([1,3,5,7,9,11,13,15,17,19]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    assert sort_even([2,4,6,8,10,12,14,16,18,20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
    assert sort_even([3,5,7,9,11,13,15,17,19,21]) == [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]

  def test2(self):
    # Tests the above function
    assert sort_even([1,2,3,4,5,6,7,8,9,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert sort_even([10,20,30,40,50,60,70,80,90,100]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

Task_id: 38

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert encode_cyclic("abc") == "abc"
    assert encode_cyclic("abcd") == "abcd"
    assert encode_cyclic("abcdabc") == "abcdabc"

  def test142(self):
    # Tests the above function
    assert encode_cyclic("string") == "string"
    assert encode_cyclic("python") == "python"
    assert encode_cyclic("language") == "language"

Task_id: 39

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert prime_fib(7)==13
    assert prime_fib(6)==10
    assert prime_fib(5)==7

  def test2(self):
  # Tests the above function
    assert prime_fib(8)==14
    assert prime_fib(9)==21
    assert prime_fib(11)==37

Task_id: 40

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert triples_sum_to_zero([-12, 1, 2, -23, 11, 1, -20, 20, 25, -25, -19, 11, 15, -25, -82]) == True
    assert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False

Task_id: 41

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert car_race_collision(3)==9
    assert car_race_collision(10)==100
    assert car_race_collision(4)==16

  def test782(self):
    # Tests the above function
    assert car_race_collision(15)==225
    assert car_race_collision(18)==648
    assert car_race_collision(19)==841

  def test414(self):
    # Tests the above function
    assert car_race_collision(17)==289
    assert car_race_collision(14)==196
    assert car_race_collision(16)==256

  def test506(self):
    # Tests the above function
    assert car_race_collision(13)==169
    assert car_race_collision(12)==144
    assert car_race_collision(11)==121

  def test34(self):
    # Tests the above function
    assert car_race_collision(18)==324
    assert car_race_collision(15)==225
    assert car_race_collision(14)==196

  def test742(self):
    # Tests the above function
    assert car_race_collision(17)==289
    assert car_race_collision(16)==256
    assert car_race_collision(13)==169

  def test179(self):
    # Tests the above function
    assert car_race_collision(12)==144
    assert car_race_collision(18)==324
    assert car_race_collision(15)==225

  def test748(self):
    # Tests the above function
    assert car_race_collision(19)==648
    assert car_race_collision(18)==324
    assert car_race_collision(17)==289

Task_id: 42

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert incr_list([1,2,3]) == [2,3,4]
    assert incr_list([10,20,30]) == [11,21,31]
    assert incr_list([4,5,6]) == [5,6,7]

  def test2(self):
    # Tests the above function
    assert incr_list([15,17,19]) == [16,18,20]
    assert incr_list([12,15,18]) == [13,16,19]
    assert incr_list([9,11,13]) == [10,12,14]


  def test3(self):
    assert incr_list([25,35,45]) == [26,36,46]
    assert incr_list([26,36,46]) == [27,37,47]
    assert incr_list([29,39,49]) == [30,40,50]


  def test4(self):
    # Tests the above function
    assert incr_list([35,45,55]) == [36,46,56]
    assert incr_list([36,46,56]) == [37,47,57]
    assert incr_list([39,49,59]) == [40,50,60]


  def test5(self):
    # Tests the above function
    assert incr_list([45,55,65]) == [46,56,66]
    assert incr_list([46,56,66]) == [47,57,67]
    assert incr_list([49,59,69]) == [50,60,70]

Task_id: 43

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert pairs_sum_to_zero([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == True
    assert pairs_sum_to_zero([[-1, 2, 3], [4, 5, 6], [7, 8, 9], [10, -11, 12]]) == True
    assert pairs_sum_to_zero([[-1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, -12]]) == False

  def test2(self):
    # Tests the above function
    assert pairs_sum_to_zero([[1, -2, 3], [-4, 5, 6], [7, 8, 9], [10, 11, -12]]) == True
    assert pairs_sum_to_zero([[-1, 2, 3], [4, 5, 6], [7, 8, 9], [10, -11, 12]]) == True
    assert pairs_sum_to_zero([[-1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, -13]]) == False

  def test3(self):
    assert pairs_sum_to_zero([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == True

Task_id: 44

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert change_base(10,2) == "1010"
    assert change_base(15,16) == "F"
    assert change_base(255,16) == "FF"

  def test2(self):
    # Tests the above function
    assert change_base(10,16) == "A"
    assert change_base(255,16) == "FF"
    assert change_base(15,10) == "15"

Task_id: 45

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test255(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test611(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test392(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test302(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test636(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test507(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test278(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

  def test282(self):
    # Tests the above function
    assert triangle_area(10,20)==100
    assert triangle_area(5,6)==30
    assert triangle_area(9,15)==75

Task_id: 46

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert fib4(7)==13
    assert fib4(8)==25
    assert fib4(9)==44

  def test110(self):
    # Tests the above function
    assert fib4(11)==94
    assert fib4(12)==129

  def test548(self):
    # Tests the above function
    assert fib4(15)==600

  def test11(self):
    # Tests the above function
    assert fib4(17)==1360

  def test341(self):
    # Tests the above function
    assert fib4(19)==3340

  def test85(self):
    # Tests the above function
    assert fib4(21)==7927

  def test673(self):
    # Tests the above function
    assert fib4(23)==17710

Task_id: 47

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert median([1, 2, 3, 4, 5, 6, 7]) == 4
    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5
    assert median([0, 1, 5, 8, 9, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90]) == 45.0

  def test45(self):
    # Tests the above function
    assert median([1, 2, 3, 4, 5, 6, 7]) == 4
    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5
    assert median([0, 1, 5, 8, 9, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90]) == 45.0

  def test725(self):
    # Tests the above function
    assert median([1, 2, 3, 4, 5, 6, 7]) == 4
    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5

Task_id: 48

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_palindrome("abc") == False
    assert is_palindrome("racecar") == True
    assert is_palindrome("python") == False

  def test2(self):
    # Tests the above function
    assert is_palindrome("aaa") == True
    assert is_palindrome("data") == False
    assert is_palindrome("xyz") == False

  def test393(self):
    # Tests the above function
    assert is_palindrome("abc") == False
    assert is_palindrome("racecar") == True
    assert is_palindrome("python") == False

  def test38(self):
    # Tests the above function
    assert is_palindrome("abc") == False
    assert is_palindrome("racecar") == True
    assert is_palindrome("python") == False

Task_id: 49

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert modp(2,10)==2
    assert modp(3,10)==6
    assert modp(4,10)==4

  def test2(self):
    # Tests the above function
    assert modp(4,13)==12
    assert modp(3,13)==11
    assert modp(5,13)==10

Task_id: 50

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert encode_shift('python') == 'aba'
    assert encode_shift('program') == 'ccb'
    assert encode_shift('language') == 'fjek'

  def test444(self):
    # Tests the above function
    assert encode_shift('java') == 'bcd'
    assert encode_shift('DBA') == 'aba'
    assert encode_shift('SQL') == 'esh'

  def test22(self):
    # Tests the above function
    assert encode_shift('database') == 'djd'
    assert encode_shift('DBMS') == 'cdb'
    assert encode_shift('MySQL') == 'eif'

  def test276(self):
    # Tests the above function
    assert encode_shift('Data') == 'ab'
    assert encode_shift('DB') == 'cd'
    assert encode_shift('SQL') == 'esh'

  def test716(self):
    # Tests the above function
    assert encode_shift('Database') == 'djd'
    assert encode_shift('DBMS') == 'cdb'
    assert encode_shift('MySQL') == 'eif'

Task_id: 51

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert remove_vowels('hello') == 'hll'
    assert remove_vowels('python') == 'pyth'
    assert remove_vowels('big') == 'bg'

  def test800(self):
    # Tests the above function
    assert remove_vowels('program') == 'prog'
    assert remove_vowels('language') == 'lng'
    assert remove_vowels('java') == 'jav'

  def test821(self):
    # Tests the above function
    assert remove_vowels('little') == 'ltt'
    assert remove_vowels('black') == 'blk'
    assert remove_vowels('white') == 'wt'

  def test154(self):
    # Tests the above function
    assert remove_vowels('data') == 'dat'
    assert remove_vowels('analyze') == 'anlz'
    assert remove_vowels('string') == 'strng'

  def test158(self):
    # Tests the above function
    assert remove_vowels('value') == 'val'
    assert remove_vowels('valid') == 'vld'
    assert remove_vowels('true') == 'tru'

Task_id: 52

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert below_threshold([-2, -1, 0, 1, 2],-1)==False
    assert below_threshold([1,2,3,4,5],6)==False
    assert below_threshold([0,1,2,4],3)==True


  def test2(self):
# Tests the above function
    assert below_threshold([10,20,30,-10,-20,-30],0)==True
    assert below_threshold([10,20,30,-10,-20,-30],10)==True
    assert below_threshold([10,20,30,-10,-20,-30],30)==True

  def test3(self):
# Tests the above function
    assert below_threshold([15,14,13,-18,-12,-25],15)==True
    assert below_threshold([15,14,13,-18,-12,-25],14)==True
    assert below_threshold([15,14,13,-18,-12,-25],25)==True

  def test4(self):
# Tests the above function
    assert below_threshold([25,24,23,-28,-22,-35],25)==True
    assert below_threshold([25,24,23,-28,-22,-35],24)==True
    assert below_threshold([25,24,23,-28,-22,-35],35)==True

Task_id: 53

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert add(10,20)==30
    assert add(15,17)==32
    assert add(-10,-20)==-30

  def test216(self):
    # Tests the above function
    assert add(9,11)==20
    assert add(-15,-17)==-32
    assert add(-10,-20)==-30
 
Task_id: 54

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert same_chars("abc","cba") == False
    assert same_chars("data","data") == True
    assert same_chars("zxy","xyz") == False

  def test2(self):
    # Tests the above function
    assert same_chars("abc","abc") == True
    assert same_chars("string","zxy") == False
    assert same_chars("program","data") == False

Task_id: 55

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert fib(7)==13
    assert fib(4)==3
    assert fib(5)==5

  def test2(self):
    # Tests the above function
    assert fib(12)==144
    assert fib(8)==21
    assert fib(6)==8

  def test3(self):
    # Tests the above function
    assert fib(14)==23328
    assert fib(15)==3779077

Task_id: 56

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert correct_bracketing("<><><") == True
    assert correct_bracketing("<><><><") == False
    assert correct_bracketing("{{<><><><") == False

  def test2(self):
    # Tests the above function
    assert correct_bracketing("{{<><><><") == False
    assert correct_bracketing("{{<><><><") == False
    assert correct_bracketing("{{<><><><") == False

  def test3(self):
    assert correct_bracketing("{{<><><><") == False
    assert correct_bracketing("{{<><><><") == False
    assert correct_bracketing("{{<><><><") == False

Task_id: 57

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert monotonic([1,2,3]) == True
    assert monotonic([3,2,1]) == False
    assert monotonic([0,1,4,9,10]) == True

  def test714(self):
    # Tests the above function
    assert monotonic([10,15,14,13,-18,12,-20]) == True
    assert monotonic([12,11,10,9,8,7,6,5,4,3,2,1]) == True
    assert monotonic([20,30,40,50,60,70,80,90,100]) == True

  def test321(self):
    # Tests the above function
    assert monotonic([1,1,1,1,1,1,1,1,1,1]) == True
    assert monotonic([2,1,2,1,2,1,2,1,2,1]) == False
    assert monotonic([10,20,30,20,10]) == False

  def test781(self):
    # Tests the above function
    assert monotonic([1,2,3,4,5,6,7,8,9,10]) == True
    assert monotonic([10,9,8,7,6,5,4,3,2,1]) == False
    assert monotonic([15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]) == False

Task_id: 58

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert common([10, 20, 30, 40, 50, 60, 70, 80, 90],[5, 25, 45, 35, 55, 22, 95, 100, 44])==[5, 22, 44, 45, 55, 60, 70, 95, 100]
    assert common([1, 2, 3, 4, 5, 6, 7, 8, 9],[10, 20, 30, 40, 50, 60, 70, 80, 90])==[1, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90]
    assert common([1, 2, 3, 4, 5, 6, 7, 8, 9],[10, 20, 30, 40, 50, 60, 70, 80, 90])==[1, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90]

Task_id: 59

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert largest_prime_factor(10)==3
    assert largest_prime_factor(7)==7
    assert largest_prime_factor(60)==5

  def test2(self):
    # Tests the above function
    assert largest_prime_factor(6)==3
    assert largest_prime_factor(2)==1

  def test3(self):
    assert largest_prime_factor(12)==3
    assert largest_prime_factor(18)==9
    assert largest_prime_factor(21)==3

  def test4(self):
# Tests the above function
    assert largest_prime_factor(121)==11
    assert largest_prime_factor(25)==5
    assert largest_prime_factor(100)==25
    assert largest_prime_factor(4)==2
    assert largest_prime_factor(2)==1
    assert largest_prime_factor(1)==1

  def test5(self):
    assert largest_prime_factor(30)==5
    assert largest_prime_factor(31)==31
    assert largest_prime_factor(36)==9
    assert largest_prime_factor(45)==15

Task_id: 60

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sum_to_n(10) == 55
    assert sum_to_n(4) == 10
    assert sum_to_n(2) == 3

  def test919(self):
    # Tests the above function
    assert sum_to_n(15) == 75
    assert sum_to_n(18) == 136
    assert sum_to_n(12) == 78

  def test299(self):
    # Tests the above function
    assert sum_to_n(17) == 136
    assert sum_to_n(14) == 91
    assert sum_to_n(16) == 144

  def test66(self):
    # Tests the above function
    assert sum_to_n(16) == 144
    assert sum_to_n(17) == 136
    assert sum_to_n(15) == 91

  def test69(self):
    # Tests the above function
    assert sum_to_n(14) == 91
    assert sum_to_n(18) == 144
    assert sum_to_n(13) == 91

Task_id: 61

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert correct_bracketing("((())())())") == True
    assert correct_bracketing("((())())())") == True
    assert correct_bracketing("{()}[{()}]") == True

  def test2(self):
    # Tests the above function
    assert correct_bracketing("((())())())") == True
    assert correct_bracketing("((())())())") == True
    assert correct_bracketing("{()}[{()}]") == True

Task_id: 62

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

  def test55(self):
    # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

  def test124(self):
    # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

  def test427(self):
    # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

  def test720(self):
    # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

  def test360(self):
    # Tests the above function
    assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12]
    assert derivative([1,0,1]) == [0, 1]
    assert derivative([4,5,6]) == [5, 6]

Task_id: 63

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert fibfib(7) == 13
    assert fibfib(8) == 21
    assert fibfib(9) == 34

  def test2(self):
    # Tests the above function
    assert fibfib(4) == 3
    assert fibfib(5) == 5
    assert fibfib(6) == 8

  def test3(self):
    # Tests the above function
    assert fibfib(14) == 233
    assert fibfib(15) == 377
  
  def test4(self):
    assert fibfib(18) == 610
    assert fibfib(20) == 987

  def test5(self):
    assert fibfib(25) == 75025
    assert fibfib(35) == 12139395331
    assert fibfib(38) == 258426108887

Task_id: 64

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test693(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test946(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test194(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test864(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test577(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
    assert vowels_count("xyz") == 0

  def test160(self):
    # Tests the above function
    assert vowels_count("final") == 2
    assert vowels_count("yay") == 3
 
Task_id: 65

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert circular_shift(12345,2) == "34512"
    assert circular_shift(12345,7) == "12345"
    assert circular_shift(12345,-2) == "51234"

Task_id: 66

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert digitSum("Python") == 13
    assert digitSum("Programming") == 33
    assert digitSum("") == 0

Task_id: 67

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert fruit_distribution("3 apples 5 oranges 7 bananas",10)==0
    assert fruit_distribution("10 apples 15 oranges 17 bananas",32)==15
    assert fruit_distribution("15 apples 20 oranges 25 bananas",55)==20

Task_id: 68

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert pluck([1,2,3,4,5,6,7,8,9,10]) == [2, 1]
    assert pluck([1,3,5,7,9,11,13,15,17,19]) == [3, 1]
    assert pluck([]) == []

  def test651(self):
    # Tests the above function
    assert pluck([2,4,6,8,10]) == [2, 0]
    assert pluck([1,5,9,13,17]) == [1, 0]
    assert pluck([]) == []

  def test448(self):
    # Tests the above function
    assert pluck([10,20,30,40,50,60,70,80,90,100]) == [20, 1]
    assert pluck([15,25,35,45,55,65,75,85,95,105]) == [25, 1]
    assert pluck([]) == []

  def test185(self):
    # Tests the above function
    assert pluck([12,14,16,18,20,22,24,26,28,30]) == [12, 0]
    assert pluck([13,15,17,19,21,23,25,27,29,31]) == [13, 0]
    assert pluck([]) == []

  def test454(self):
    # Tests the above function
    assert pluck([36,38,40,42,44,46,48,50,52,54]) == [36, 0]
 
Task_id: 69

class Tests(unittest.TestCase):
  def test1(self):
    pass

Task_id: 70

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert strange_sort_list([1,3,5,7,9,11,13,15,17,19]) == [1, 19, 3, 17, 5, 15, 13, 9, 11, 7]
    assert strange_sort_list([1,2,3,4,5,6,7,8,9,10]) == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]
    assert strange_sort_list([10,15,14,13,12,11,18,17,16,19]) == [10, 19, 12, 18, 13, 17, 15, 14, 11, 16]

Task_id: 71

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert triangle_area(2,2,2)==-1
    assert triangle_area(1,2,3)==4.32
    assert triangle_area(5,7,9)==30.39

  def test443(self):
    # Tests the above function
    assert triangle_area(10,15,17)==54.35
    assert triangle_area(19,17,15)==63.54
    assert triangle_area(10,5,15)==17.08

  def test460(self):
    # Tests the above function
    assert triangle_area(9,10,14)==40.24
    assert triangle_area(14,15,13)==56.96
    assert triangle_area(19,18,17)==61.04

  def test829(self):
    # Tests the above function
    assert triangle_area(15,17,19)==67.48
    assert triangle_area(18,19,17)==75.69
    assert triangle_area(15,14,19)==50.99

  def test982(self):
    # Tests the above function
    assert triangle_area(16,18,14)==78.46
    assert triangle_area(17,16,15)==69.04
    assert triangle_area(14,18,16)==57.85

Task_id: 72

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert will_it_fly([1,2,3,4],[4,3,2,1]) == True
    assert will_it_fly([1,2,3],[4,5,6]) == False
    assert will_it_fly([1,2,3,4,5],[5,4,3,2,1]) == True

Task_id: 73

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert smallest_change([1,2,3,4]) == 2
    assert smallest_change([1,1,1,1]) == 3
    assert smallest_change([2,1,2,1]) == 1

  def test2(self):
    # Tests the above function
    assert smallest_change([1,2,3,4,5,6,7,8,9,10]) == 5
    assert smallest_change([1,5,7,9,11,13,15,17,19]) == 4
    assert smallest_change([1,7,11,15]) == 2


  def test3(self):
    assert smallest_change([1,2,1,2]) == 0
    assert smallest_change([1,1,1,1]) == 3
    assert smallest_change([2,2,2,2]) == 0

  def test4(self):
    assert smallest_change([1,5,7,5,11,13,15,17,19]) == 4
    assert smallest_change([15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]) == 15
    assert smallest_change([1,2,3,1,2,3]) == 0

Task_id: 74

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert total_match(["abc", "xyz", "abc", "123"],["abc", "123", "zxy", "xyz"])==['abc', '123', 'xyz']
    assert total_match(["abc", "xyz", "abc", "123"],["abc", "123", "zxy", "xyz", "abc", "123"])==['abc', '123', 'xyz']
    assert total_match(["abc", "xyz", "abc", "123"],["abc", "123", "zxy", "xyz", "abc", "123", "abc", "123"])==['abc', '123', 'xyz', 'abc', '123']

Task_id: 75

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_multiply_prime(30030)==True
    assert is_multiply_prime(121)==False
    assert is_multiply_prime(10)==True

  def test2(self):
    # Tests the above function
    assert is_multiply_prime(180)==True
    assert is_multiply_prime(15)==False
    assert is_multiply_prime(36)==True

  def test3(self):
    # Tests the above function
    assert is_multiply_prime(420)==True
    assert is_multiply_prime(2100)==False
    assert is_multiply_prime(300)==True

Task_id: 76

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_simple_Power(100, 2) == True
    assert is_simple_Power(101, 2) == False
    assert is_simple_Power(10, 10) == True

  def test2(self):
    # Tests the above function
    assert is_simple_Power(1000, 10) == False
    assert is_simple_Power(100, 100) == True
    assert is_simple_Power(10, 1000) == False

Task_id: 77

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert iscube(27) == 3
    assert iscube(10) == 1
    assert iscube(-100) == -10

  def test309(self):
    # Tests the above function
    assert iscube(9) == 3
    assert iscube(-7) == -1
    assert iscube(-144) == -12

  def test425(self):
    # Tests the above function
    assert iscube(18) == 6
    assert iscube(-18) == -6
    assert iscube(-147) == -121

  def test993(self):
    # Tests the above function
    assert iscube(12) == 4
    assert iscube(-12) == -4
    assert iscube(-192) == -144

  def test395(self):
    # Tests the above function
    assert iscube(17) == 5
    assert iscube(-17) == -5
    assert iscube(-168) == -132

  def test550(self):
    # Tests the above function
    assert iscube(15) == 4
    assert iscube(-15) == -4
    assert iscube(-140) == -116

  def test584(self):
    # Tests the above function
    assert iscube(14) == 4
    assert iscube(-14) == -4
    assert iscube(-126) == -100

  def test240(self):
    # Tests the above function
    assert iscube(13) == 4
    assert iscube(-13) == -4
    assert iscube(-114) == -81

  def test252(self):
    # Tests the above function
    assert iscube(12) == 4
    assert iscube(-12) == -4
    assert iscube(-108) == -72

  def test624(self):
    # Tests the above function
    assert iscube(11) == 3
    assert iscube(-11) == -3
 
Task_id: 78

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert hex_key("python")==3
    assert hex_key("program")==5
    assert hex_key("language")==6

  def test47(self):
    # Tests the above function
    assert hex_key("program")==5
    assert hex_key("language")==6
    assert hex_key("data")==4

  def test458(self):
    # Tests the above function
    assert hex_key("program")==5
    assert hex_key("language")==6
    assert hex_key("data")==4


Task_id: 79

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert decimal_to_binary(10)==('1010')
    assert decimal_to_binary(5)==('101')
    assert decimal_to_binary(15)==('1111')

  def test694(self):
    # Tests the above function
    assert decimal_to_binary(10)==('1010')
    assert decimal_to_binary(5)==('101')
    assert decimal_to_binary(15)==('1111')

  def test315(self):
    # Tests the above function
    assert decimal_to_binary(10)==('1010')
    assert decimal_to_binary(5)==('101')
    assert decimal_to_binary(15)==('1111')

Task_id: 80

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert is_happy("abc") == False
    assert is_happy("abacba") == True
    assert is_happy("aaaa") == False

Task_id: 81

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']
    assert numerical_letter_grade([4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']

Task_id: 82

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert prime_length('abc') == False
    assert prime_length('117') == True
    assert prime_length('20') == False

Task_id: 83

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert starts_one_ends(2) == 180
    assert starts_one_ends(3) == 18000
    assert starts_one_ends(4) == 1800000
    assert starts_one_ends(5) == 180000000
    assert starts_one_ends(6) == 1800000000
    assert starts_one_ends(7) == 18000000000

  def test360(self):
    # Tests the above function
    assert starts_one_ends(8) == 180000000000
    assert starts_one_ends(9) == 1800000000000
    assert starts_one_ends(10) == 18000000000000
    assert starts_one_ends(11) == 180000000000000
    assert starts_one_ends(12) == 1800000000000000
    assert starts_one_ends(13) == 18000000000000000

  def test881(self):
    assert starts_one_ends(14) == 180000000000000000
    assert starts_one_ends(15) == 1800000000000000000
    assert starts_one_ends(16) == 18000000000000000000

Task_id: 84

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert solve(123)==('1101011')
    assert solve(100)==('1100100')
    assert solve(4)==('100')

Task_id: 85

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert add([1,2,3,4,5,6,7,8,9,10]) == 30
    assert add([1,5,7,9,10]) == 22
    assert add([1,2,4,8,9]) == 14

  def test34(self):
    # Tests the above function
    assert add([15, 12, 13, 10, 3, 20]) == 50
    assert add([19, 17, 15, 18, 13, 20]) == 62
    assert add([12,15,19,18,17]) == 60

  def test22(self):
    # Tests the above function
    assert add([1,2,3,4,5,6,7,8,9,10]) == 30
    assert add([1,5,7,9,10]) == 22
    assert add([1,2,4,8,9]) == 14

Task_id: 86

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert anti_shuffle("python program") == "aaaabbcccdddhhmmoppyy"
    assert anti_shuffle("data analysis") == "aaaabccddehhnnllssuy"
    assert anti_shuffle("database") == "aaaabccddeh"

  def test390(self):
    # Tests the above function
    assert anti_shuffle("DBA") == "aaaDbb"
    assert anti_shuffle("SQL") == "aaaSQL"
    assert anti_shuffle("DB2") == "aaa2DB"

  def test89(self):
    # Tests the above function
    assert anti_shuffle("python program") == "aaaabbcccdddhhmmoppyy"
    assert anti_shuffle("data analysis") == "aaaabccddehhnnllssuy"
    assert anti_shuffle("database") == "aaaabccddeh"

Task_id: 87

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]],10)==[(1, 3), (2, 3)]
    assert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]],15)==[(2, 4), (3, 4)]
    assert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]],18)==[(3, 4)]

  def test394(self):
    # Tests the above function
    assert get_row([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]],16)==[(3, 3)]

Task_id: 88

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sort_array([1,2,3,4]) == [2,4,1,3]
    assert sort_array([1,2,3]) == [2,1,3]
    assert sort_array([]) == []

  def test2(self):
    assert sort_array([4,5,6,1,2,3]) == [1,2,3,4,5,6]
    assert sort_array([7,8,9,4,5,6,1,2,3]) == [1,2,3,4,5,6,7,8,9]
    assert sort_array([10,11,12,13,4,5,6,1,2,3]) == [1,2,3,4,5,6,10,11,12,13]

  def test3(self):
    assert sort_array([15,14,13,12,11,10,4,5,6,1,2,3]) == [1,2,3,4,5,6,10,11,12,13,14,15]
    assert sort_array([18,17,16,15,14,13,12,11,10,4,5,6,1,2,3]) == [1,2,3,4,5,6,10,11,12,13,14,15,16,17,18]

Task_id: 89

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert encrypt("abc") == "cde"
    assert encrypt("data") == "eita"
    assert encrypt("zxy") == "xyz"

  def test949(self):
    # Tests the above function
    assert encrypt("python") == "qstn"
    assert encrypt("program") == "hromu"
    assert encrypt("language") == "afzal"

  def test989(self):
    assert encrypt("bigdata") == "hromubd"
    assert encrypt("hadoop") == "hpuja"
    assert encrypt("hadoop") == "hpuja"

Task_id: 90

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert next_smallest([10,20,30,40,50,-60,-100,-150]) == 20
    assert next_smallest([1,2,3,1,2,3]) == 2
    assert next_smallest([1,-2,3,-1,2,-3]) == -1

  def test2(self):
    # Tests the above function
    assert next_smallest([1,1,1,1]) == None
    assert next_smallest([10,15,14,13,-18,12,-20]) == 13

  def test3(self):
    assert next_smallest([8,9,1,2,3,4,5,6,7,8,9,10]) == 11
    assert next_smallest([15,12,13,10,15,12,-20]) == 10
    assert next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 12

  def test4(self):
    assert next_smallest([20,40,60,80,100,30,50,70,90,110,130,150,170,190,210]) == 30
    assert next_smallest([25,35,45,55,75,95,125,155,175,185,195]) == 35

Task_id: 91

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_bored("I love programming language.") == 0
    assert is_bored("I am a programmer.") == 1
    assert is_bored("I am very bored.") == 1

  def test2(self):
    assert is_bored("I am a very happy person.") == 0
    assert is_bored("I am a little bit bored.") == 1
    assert is_bored("I am a really cool person.") == 0

  def test3(self):
    # Runs the above function
    assert is_bored("I am a very excited person.") == 0
    assert is_bored("I am a little bit excited.") == 1
    assert is_bored("I am a really exciting person.") == 0

  def test4(self):
    assert is_bored("I am a little bit happy.") == 1
    assert is_bored("I am a really happy person.") == 0
    assert is_bored("I am a very sad person.") == 0

  def test5(self):
# Tests the above function
    assert is_bored("I am a little bit sad.") == 1
    assert is_bored("I am a really sad person.") == 0
    assert is_bored("I am a very angry person.") == 0

Task_id: 92

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert any_int(1,2,3)==False
    assert any_int(1,5,7)==True
    assert any_int('1','2','3')==False

  def test2(self):
# Tests the above function
    assert any_int(10,20,30)==True
    assert any_int('10','20','30')==False
    assert any_int(10.5,20.5,30.5)==False

  def test3(self):
# Tests the above function
    assert any_int('10.5','20','30')==True
    assert any_int('10.5','20','30.5')==True
    assert any_int('10.5','30','20.5')==True

  def test4(self):
    assert any_int('15','25','35')==True
    assert any_int('15','25','37')==False
    assert any_int('15','35','25')==True

  def test5(self):
    assert any_int('15.5','25.5','35.5')==True
    assert any_int('15.5','25.5','37.5')==False
    assert any_int('15.5','35.5','25.5')==True

Task_id: 93

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert encode('AaEeIiOoUu') == 'AaEeIiOoUu'
    assert encode('python') == 'Python'
    assert encode('Programming') == 'Programming'

  def test141(self):
    # Tests the above function
    assert encode('Hadoop') == 'Hadoop'
    assert encode('bigdata') == 'Bigdata'
    assert encode('data') == 'Data'

Task_id: 94

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert skjkasdkd([1,2,3,5,7,8,13,17,19]) == 30
    assert skjkasdkd([1,2,3,4,5,6,7,8,9]) == 25
    assert skjkasdkd([10,15,14,13,18,12,20]) == 50

  def test260(self):
    # Tests the above function
    assert skjkasdkd([1,2,3,5,7,8,13,17,19]) == 30
    assert skjkasdkd([10,15,14,13,18,12,20]) == 50
    assert skjkasdkd([1,7,13,19]) == 11

  def test943(self):
    # Tests the above function
    assert skjkasdkd([1,2,3,4,5,6,7,8,9]) == 25
    assert skjkasdkd([10,15,14,13,18,12,20]) == 50
    assert skjkasdkd([1,7,13,19]) == 11

Task_id: 95

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert check_dict_case({'Python': 10, 'program': 20})==True
    assert check_dict_case({10: 'Python', 'program': 20})==False
    assert check_dict_case({'Programming':10,"language":8})==False

  def test2(self):
# Tests the above function
    assert check_dict_case({'program':10,"language":8})==False
    assert check_dict_case({'Program':10,"Language":8})==False
    assert check_dict_case({'Programming':10,"language":8})==False

Task_id: 96

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert count_up_to(10)==[2, 3, 5, 7]
    assert count_up_to(5)==[2, 3, 5]
    assert count_up_to(11)==[2, 3, 5, 7, 11]

  def test411(self):
    # Tests the above function
    assert count_up_to(13)==[2, 3, 5, 7, 11, 13]
    assert count_up_to(18)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    assert count_up_to(25)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

  def test662(self):
    # Tests the above function
    assert count_up_to(12)==[2, 3, 5, 7, 11]
    assert count_up_to(15)==[2, 3, 5, 7, 11, 13]

Task_id: 97

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert multiply(12,15)==180
    assert multiply(-12,-15)==-180
    assert multiply(-5,-7)==35

  def test387(self):
    # Tests the above function
    assert multiply(2,3)==6
    assert multiply(-2,-3)==-6
    assert multiply(-5,-7)==35

Task_id: 98

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert count_upper("AaBbEeIiOoUu") == 5
    assert count_upper("PYTHON") == 1
    assert count_upper("Programming") == 3

Task_id: 99

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert closest_integer('123.123') == 123
    assert closest_integer('123.5') == 124
    assert closest_integer('-123.5') == -124
    assert closest_integer('0.5') == 1
    assert closest_integer('0.0') == 0

Task_id: 100

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert make_a_pile(1)==[3]
    assert make_a_pile(2)==[5,7]
    assert make_a_pile(3)==[9,11,13]

  def test2(self):
    # Tests the above function
    assert make_a_pile(4)==[11,13,15,17]
    assert make_a_pile(5)==[13,15,17,19,21]
    assert make_a_pile(6)==[15,17,19,21,23,25]

  def test3(self):
    assert make_a_pile(7)==[17,19,21,23,25,27,29]
    assert make_a_pile(8)==[19,21,23,25,27,29,31,33]
    assert make_a_pile(9)==[21,23,25,27,29,31,33,35,37]

Task_id: 101

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert words_string("Hi,there,how,are,you") == ['Hi', 'there', 'how', 'are', 'you']
    assert words_string("Hi,there,Hi,Hi,Hi") == ['Hi', 'there', 'Hi', 'Hi', 'Hi']
    assert words_string("") == []

Task_id: 102

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert choose_num(3, 4) == 3
    assert choose_num(2, 2) == -1
    assert choose_num(1, 2) == 1

  def test2(self):
    # Tests the above function
    assert choose_num(1, 4) == 3
    assert choose_num(4, 2) == 2
    assert choose_num(4, 4) == -1

  def test3(self):
    assert choose_num(3, 3) == 2
    assert choose_num(2, 3) == 1
    assert choose_num(2, 4) == 2

  def test4(self):
    assert choose_num(1, 1) == -1
    assert choose_num(2, 1) == 1
    assert choose_num(3, 1) == 1

  def test5(self):
    assert choose_num(4, 1) == 1
    assert choose_num(4, 2) == 2
    assert choose_num(4, 3) == 3

  def test6(self):
    assert choose_num(4, 4) == -1
    assert choose_num(3, 4) == 2
    assert choose_num(2, 4) == 2

  def test7(self):
    assert choose_num(3, 3) == 2
    assert choose_num(2, 3) == 1
    assert choose_num(2, 4) == 2

Task_id: 103

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert rounded_avg(2, 5) == '1011'
    assert rounded_avg(5, 7) == '10111'
    assert rounded_avg(1, 1) == '11'

  def test2(self):
    # Tests the above function
    assert rounded_avg(4, 4) == '1100'
    assert rounded_avg(4, 5) == '1101'
    assert rounded_avg(4, 6) == '11100'

  def test3(self):
    assert rounded_avg(7, 13) == '111111111111'
    assert rounded_avg(13, 13) == '111111111111'
    assert rounded_avg(13, 14) == '111111111111'
    assert rounded_avg(13, 15) == '111111111111'

  def test4(self):
    assert rounded_avg(14, 14) == '111111111111'
    assert rounded_avg(14, 15) == '111111111111'
    assert rounded_avg(14, 16) == '111111111111'

  def test5(self):
    assert rounded_avg(15, 15) == '111111111111'
    assert rounded_avg(15, 16) == '111111111111'

Task_id: 104

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]
    assert unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,3,5,7,9,11,13,15,17,19]
    assert unique_digits([12,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,3,5,7,9,11,13,15,17,19]

  def test2(self):
    # Tests the above function
    assert unique_digits([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [7,9,11,13,15,17,19]
    assert unique_digits([15,12,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [15,17,19]

Task_id: 105

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert by_length(["win", "ne", "cs", "a", "z", "m", "d", "b", "c", "e", "f", "g", "h", "i", "j", "k", "l", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"])==['Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A', 'NE', 'CS', 'WIN']
    assert by_length(["python", "excellent", "program", "language"])==['Excellent', 'Python', 'Program', 'Language']
    assert by_length(["java", "programming", "language", "big"])==['Big', 'Java', 'Programming', 'Language']


  def test2(self):
    # Tests the above function
    assert by_length(["java", "programming", "language", "big"])==['Big', 'Java', 'Programming', 'Language']

Task_id: 106

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert f(5) == [1,2,6,24,105]
    assert f(4) == [1,2,6,24]
    assert f(3) == [1,2,6]

  def test2(self):
    # Tests the above function
    assert f(10) == [1,2,6,24,105,720,5040,40320,362880,3628800]
    assert f(15) == [1,2,6,24,105,720,5040,40320,362880,3628800,39916800,399168000,479001600,4790016000,627488000]
    assert f(12) == [1,2,6,24,105,720,5040,40320,362880,3628800,39916800,399168000]

Task_id: 107

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert even_odd_palindrome(100)==(25,75)
    assert even_odd_palindrome(5)==(3,2)
    assert even_odd_palindrome(10)==(5,5)

  def test4(self):
    # Tests the above function
    assert even_odd_palindrome(21)==(12,12)
    assert even_odd_palindrome(25)==(15,15)
    assert even_odd_palindrome(30)==(20,20)

  def test990(self):
    # Tests the above function
    assert even_odd_palindrome(35)==(22,22)
    assert even_odd_palindrome(40)==(25,25)
    assert even_odd_palindrome(45)==(30,30)

  def test200(self):
    # Tests the above function
    assert even_odd_palindrome(50)==(35,35)
    assert even_odd_palindrome(55)==(38,38)
    assert even_odd_palindrome(60)==(41,41)
 
Task_id: 108

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert count_nums([123,1,-1234,-12345,-123456]) == 6
    assert count_nums([1,2,3,4,5,6,7,8,9,10,-100,-200,-300]) == 12
    assert count_nums([100,200,300,400,500,-1000,-2000,-3000]) == 8

  def test487(self):
    # Tests the above function
    assert count_nums([17,52,-99,156,-356,123412,-123456]) == 6
    assert count_nums([1,2,3,4,5,6,7,8,9,10,-100,-200,-300]) == 12
    assert count_nums([100,200,300,400,500,-1000,-2000,-3000]) == 8

  def test388(self):
    # Tests the above function
    assert count_nums([17,-52,99,-156,356,-123412,123456]) == 5
    assert count_nums([1,2,3,4,5,6,7,8,9,10,-100,-200,-300]) == 12

Task_id: 109

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert move_one_ball([1,2,3,4,5,6,7,8,9,10]) == True
    assert move_one_ball([3,2,1,4,5,6,7,8,9,10]) == False
    assert move_one_ball([10,9,8,7,6,5,4,3,2,1]) == True

  def test2(self):
# Tests the above function
    assert move_one_ball([1,3,5,7,9,11,13,15,17,19]) == True
    assert move_one_ball([13,15,11,19,17,15,13,11,19,17]) == False
    assert move_one_ball([19,15,13,11,17,15,13,11,19,17]) == True

Task_id: 110

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert exchange([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,10]) == "YES"
    assert exchange([1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]) == "YES"
    assert exchange([1,3,5,7,9,11,13,15,17],[2,4,6,8,10,12,14,16,18]) == "NO"

  def test200(self):
    # Tests the above function
    assert exchange([1,3,5,7,9,11,13,15,17],[2,4,6,8,10,12,14,16,18]) == "NO"
    assert exchange([10,9,8,7,6,5,4,3,2],[1,2,3,4,5,6,7,8,10]) == "YES"
    assert exchange([1,2,3,4,5,6,7,8,9],[18,17,16,15,14,13,12,11,10]) == "YES"

Task_id: 111

class Tests(unittest.TestCase):
  def test1(self):
    pass

Task_id: 112

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert reverse_delete("peep","ep") == ("p","True")
    assert reverse_delete("string","ab") == ("sting","False")
    assert reverse_delete("data","da") == ("t","True")

  def test2(self):
    # Tests the above function
    assert reverse_delete("GeeksForGeeks","GFor") == ("eksFor","True")
    assert reverse_delete("GeeksForGeeks","ab") == ("ksForGeeks","False")
    assert reverse_delete("GeeksForGeeks","G") == ("eksForGeek","True")

Task_id: 113

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert odd_count([[1,2,3],[4,5,6],[7,8,9]]) == ['the number of odd elements 1 in the str1st element is 1.','the number of odd elements 2 in the str2nd element is 2.','the number of odd elements 3 in the str3rd element is 3.']
    assert odd_count([[1,2],[3,4],[5,6]]) == ['the number of odd elements 1 in the str1st element is 1.','the number of odd elements 1 in the str2nd element is 1.','the number of odd elements 1 in the str3rd element is 1.',]
    assert odd_count([[10,15,14,13,18,12]]) == ['the number of odd elements 3 in the str1st element is 3.',]

  def test2(self):
    # Tests the above function
    assert odd_count([[2,1,4,5,6,0]]) == ['the number of odd elements 3 in the str1st element is 3.',]
    assert odd_count([[8,9,12,15,13,11]]) == ['the number of odd elements 3 in the str1st element is 3.',]
    assert odd_count([[7,8,9,10,11,12]]) == ['the number of odd elements 3 in the str1st element is 3.',]

Task_id: 114

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert minSubArraySum([1,-2,3]) == 1
    assert minSubArraySum([1,2,-2,3]) == 1
    assert minSubArraySum([1,-3,2]) == -1

Task_id: 115

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert max_fill([[1,2,3],[1,2,3],[1,2,3]],4)==6
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],4)==4
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],1)==27

  def test699(self):
    # Tests the above function
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],1)==27
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],2)==13
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],3)==9

  def test246(self):
    # Tests the above function
    assert max_fill([[1,2,3],[4,5,6],[7,8,9]],10)==2

Task_id: 116

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sort_array([1,10,11,12]) == [1, 11, 10, 12]
    assert sort_array([15, 1, 2, 13, 10]) == [1, 5, 10, 13, 15]
    assert sort_array([19, 5, 3, 17, 12, 25, 20, 29, 18, 11]) == [5, 3, 11, 17, 18, 19, 12, 20, 25, 29]

  def test2(self):
    # Tests the above function
    assert sort_array([1,2,3,4,5,6,7,8,9,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert sort_array([12,15,14,13,18,17,16,20,25,23,22,21]) == [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25]

Task_id: 117

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert select_words("python",2)==['consonant']
    assert select_words("little",2)==['little']
    assert select_words("  assert",2)==['consonant']

  def test2(self):
    # Tests the above function
    assert select_words("little",2)==['little']
    assert select_words("  assert",2)==['consonant']
    assert select_words("little",2)==['little']

Task_id: 118

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert get_closest_vowel("string")==""
    assert get_closest_vowel("data")==""
    assert get_closest_vowel("little")==""

  def test2(self):
    # Tests the above function
    assert get_closest_vowel("python")==""
    assert get_closest_vowel("program")==""
    assert get_closest_vowel("solution")==""

  def test3(self):
    assert get_closest_vowel("big")==""
    assert get_closest_vowel("little")==""
    assert get_closest_vowel("alpha")==""

  def test4(self):
    assert get_closest_vowel("zeta")==""
    assert get_closest_vowel("abc")==""
    assert get_closest_vowel("xyz")==""
    assert get_closest_vowel("abcde")==""

  def test5(self):
    assert get_closest_vowel("abcedf")==""
    assert get_closest_vowel("abcedif")==""
    assert get_closest_vowel("abcedifm")==""
    assert get_closest_vowel("abcedifms")==""

Task_id: 119

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert match_parens(['(', '(', ')', ')', ')']) == 'Yes'
    assert match_parens(['(', '(', ')', '(', ')']) == 'Yes'
    assert match_parens(['(', '(', ')', '(', '(', ')']) == 'No'

  def test2(self):
    # Tests the above function
    assert match_parens(['(', '(', ')', '(', '(', ')']) == 'No'
    assert match_parens(['(', '(', ')', '(', '(', ')']) == 'No'
    assert match_parens(['(', '(', ')', '(', '(', ')']) == 'No'

Task_id: 120

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],0)==[]
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],1)==[-2]
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],2)==[-2,-1]
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],3)==[-2,-1,3]

  def test776(self):
    # Tests the above function
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],4)==[-2,-1,3,4]
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],5)==[-2,-1,3,4,4]
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],10)==[-2,-1,3,4,4,5,6,7,0]

  def test123(self):
    # Tests the above function
    assert maximum([1, 2, 3, 4, 4, 5, 6, 7, 0, -1, -2],11)==[-2,-1,3,4,4,5,6,7,0,-1]

Task_id: 121

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert solution([1,2,3,4,5,6,7,8,9,10]) == 3
    assert solution([1,5,7,9,11,13]) == 5
    assert solution([1,2,3]) == 0

  def test629(self):
    # Tests the above function
    assert solution([4,5,6]) == 0
    assert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 10
    assert solution([1,5,7,9,11,13,15,17,19]) == 5

  def test780(self):
    # Tests the above function
    assert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 15

  def test896(self):
    # Tests the above function
    assert solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 25
   
Task_id: 122

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3) == 15
    assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2) == 6
    assert add_elements([15, 12, 13, 10, 5, 20],2) == 31

  def test703(self):
    # Tests the above function
    assert add_elements([15, 12, 13, 10, 5, 20, 19, 18, 17, 16],5) == 66
    assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5) == 20
    assert add_elements([15, 12, 13, 10, 5, 20, 19, 18, 17, 16],4) == 50

  def test980(self):
    # Tests the above function
    assert add_elements([15, 12, 13, 10, 5, 20, 19, 18, 17, 16],4) == 50

  def test273(self):
    # Tests the above function
    assert add_elements([15, 12, 13, 10, 5, 20, 19, 18, 17, 16],4) == 50

Task_id: 123

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert get_odd_collatz(13)==[13, 40, 20, 8, 4, 2, 1]
    assert get_odd_collatz(7)==[7, 22, 11, 34, 17, 52, 29, 13, 40, 20, 8, 4, 2, 1]
    assert get_odd_collatz(19)==[19, 58, 39, 114, 53, 160, 89, 254, 133, 403, 201, 672, 336, 168, 84, 42, 21, 64, 32, 16, 8, 4, 2, 1]


  def test2(self):
    # Tests the above function
    assert get_odd_collatz(10)==[10, 5, 16, 8, 4, 2, 1]

Task_id: 124

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert valid_date("02-29-2020")==False
    assert valid_date("02-28-2021")==True
    assert valid_date("13-11-2020")==False

  def test2(self):
    # Tests the above function
    assert valid_date("02-28-2021")==True
    assert valid_date("02-29-2020")==False
    assert valid_date("13-11-2020")==False

  def test3(self):
    assert valid_date("06-09-2021")==True
    assert valid_date("13-11-2020")==False
    assert valid_date("02-28-2021")==True

Task_id: 125

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert split_words("python") == ['python']
    assert split_words("little") == ['little']
    assert split_words("  assert") == ['  assert']

  def test872(self):
    # Tests the above function
    assert split_words("Programming") == ['Programming']
    assert split_words("Language") == ['Language']
    assert split_words("Data") == ['Data']

Task_id: 126

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_sorted([1,1,1,2,2,2]) == True
    assert is_sorted([1,2,3,4,5,6,7,8,9,10]) == True
    assert is_sorted([1,2,1,2,1,2]) == False

  def test2(self):
    assert is_sorted([1,2,3,4,5,4,3,2,1]) == False
    assert is_sorted([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == True
    assert is_sorted([1,2,6,4,5,6,3,5,1,2,6,4,5,6,3,5,1,2,6,4,5,6,3,5,1,2]) == False

Task_id: 127

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert intersection((1,10),(11,15)) == "NO"
    assert intersection((1,5),(6,10)) == "YES"
    assert intersection((1,15),(1,10)) == "YES"

  def test2(self):
    # Tests the above function
    assert intersection((1,15),(1,10)) == "YES"
    assert intersection((6,10),(11,15)) == "NO"
    assert intersection((1,5),(6,10)) == "YES"

  def test3(self):
    assert intersection((1,10),(11,15)) == "NO"
    assert intersection((1,5),(6,10)) == "YES"
    assert intersection((1,15),(1,10)) == "YES"

Task_id: 128

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert prod_signs([1,-2,3,-4]) == 4
    assert prod_signs([1,-2,3]) == 3
    assert prod_signs([1,2,3]) == 6

  def test2(self):
    # Tests the above function
    assert prod_signs([1,1,-1,-1]) == -1
    assert prod_signs([1,-1]) == -1
    assert prod_signs([1,-2,3,-4]) == 4

  def test712(self):
    # Tests the above function
    assert prod_signs([1,2,3]) == 6
    assert prod_signs([1,1,-1,-1]) == -1
    assert prod_signs([1,-1]) == -1

Task_id: 129

class Tests(unittest.TestCase):
  def test1(self):
    pass

Task_id: 130

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert tri(4)==[1, 3, 6, 10, 15]
    assert tri(5)==[1, 3, 6, 10, 15, 21]
    assert tri(2)==[1, 3]

Task_id: 131

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert digits(123)==36
    assert digits(121)==121
    assert digits(0)==0

Task_id: 132

class Tests(unittest.TestCase):
  def test1(self):
    pass

Task_id: 133

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert sum_squares([1,2,3]) == 36
    assert sum_squares([1,7,9]) == 144
    assert sum_squares([4,5,6]) == 225

  def test55(self):
    # Tests the above function
    assert sum_squares([10,15,14]) == 625
    assert sum_squares([19,18,17]) == 849
    assert sum_squares([12,13,15]) == 456

  def test729(self):
    # Tests the above function
    assert sum_squares([2,5,7]) == 84
    assert sum_squares([16,15,14]) == 676
    assert sum_squares([11,12,13]) == 466

  def test165(self):
    # Tests the above function
    assert sum_squares([3,6,9]) == 144
    assert sum_squares([18,17,16]) == 676
    assert sum_squares([12,13,15]) == 456

  def test333(self):
    # Tests the above function
    assert sum_squares([4,7,10]) == 256
    assert sum_squares([20,19,18]) == 849
    assert sum_squares([13,14,15]) == 676

  def test91(self):
    # Tests the above function
    assert sum_squares([5,8,11]) == 361
    assert sum_squares([21,20,19]) == 1369
    assert sum_squares([14,15,16]) == 896

Task_id: 134

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert check_if_last_char_is_a_letter("Geeks For Geeks") == True
    assert check_if_last_char_is_a_letter("Geeks For") == False
    assert check_if_last_char_is_a_letter("Geeks") == False

Task_id: 135

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert can_arrange([3,2,1]) == -1
    assert can_arrange([1,2,3]) == -1
    assert can_arrange([2,1,3]) == 1

  def test2(self):
    # Tests the above function
    assert can_arrange([4,3,2,1]) == 2
    assert can_arrange([1,4,3,2]) == 1
    assert can_arrange([2,4,3,1]) == 3

Task_id: 136

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert largest_smallest_integers([1, 3, -5, 2, -7, 18, 19, -6, 23, -19])==(1,-7)
    assert largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==(1,10)
    assert largest_smallest_integers([10,15,-14,13,-18,12,-20])==(-18,-14)

  def test41(self):
    # Tests the above function
    assert largest_smallest_integers([1,-2,3,-4,5])==(-2,1)
    assert largest_smallest_integers([12,15,14,13,18,12,20])==(12,13)
    assert largest_smallest_integers([10,20,-30,40,-50,60])==(-50,20)

Task_id: 137

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert compare_one("10.22", "10.21") == "10.22"
    assert compare_one("19.22", "18.21") == "19.22"
    assert compare_one("12.22", "12.21") == None

Task_id: 138

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert is_equal_to_sum_even(10) == True
    assert is_equal_to_sum_even(11) == False
    assert is_equal_to_sum_even(18) == True

  def test2(self):
    assert is_equal_to_sum_even(19) == False
    assert is_equal_to_sum_even(14) == True
    assert is_equal_to_sum_even(16) == True

  def test3(self):
    assert is_equal_to_sum_even(12) == False
    assert is_equal_to_sum_even(17) == False
    assert is_equal_to_sum_even(13) == False

  def test4(self):
    assert is_equal_to_sum_even(9) == False
    assert is_equal_to_sum_even(4) == False
    assert is_equal_to_sum_even(2) == False

  def test5(self):
    assert is_equal_to_sum_even(6) == False
    assert is_equal_to_sum_even(1) == False
    assert is_equal_to_sum_even(15) == False

  def test6(self):
    assert is_equal_to_sum_even(7) == False
    assert is_equal_to_sum_even(5) == False
    assert is_equal_to_sum_even(3) == False

  def test7(self):
    assert is_equal_to_sum_even(14) == True
    assert is_equal_to_sum_even(18) == True

Task_id: 139

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert special_factorial(4) == 24
    assert special_factorial(2) == 2
    assert special_factorial(3) == 6

  def test829(self):
    # Tests the above function
    assert special_factorial(10) == 3628800
    assert special_factorial(5) == 120
    assert special_factorial(7) == 5040

  def test484(self):
    # Tests the above function
    assert special_factorial(15) == 1307674368000
    assert special_factorial(12) == 40320
    assert special_factorial(18) == 665665280

  def test552(self):
    # Tests the above function
    assert special_factorial(17) == 13076743680000
    assert special_factorial(14) == 5640
    assert special_factorial(16) == 65536

  def test156(self):
    # Tests the above function
    assert special_factorial(13) == 66
    assert special_factorial(11) == 39
    assert special_factorial(12) == 46

Task_id: 140

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert fix_spaces("python  program") == 'python_-_program'
    assert fix_spaces("python   programming    language") == 'python_-_programming_-_language'
    assert fix_spaces("python                     program") == 'python_-_program'

Task_id: 141

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert file_name_check("win32.txt")==('Yes')
    assert file_name_check("data123.exe")==('Yes')
    assert file_name_check("file")==('No')

  def test2(self):
    # Tests the above function
    assert file_name_check("win32")==('No')
    assert file_name_check("data123")==('No')
    assert file_name_check("file")==('No')

Task_id: 142

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert sum_squares([1,2,3,4,5,6,7,8,9,10]) == 300
    assert sum_squares([1,5,7,-10,15,-15,19,-14,-13,-18]) == 1296
    assert sum_squares([15,17,-19,15,-18,16,-17,19,-14,15]) == 1088

  def test864(self):
    # Tests the above function
    assert sum_squares([1,2,3]) == 14
    assert sum_squares([4,5,6]) == 29
    assert sum_squares([7,8,9]) == 44

  def test309(self):
    # Tests the above function
    assert sum_squares([1,2,3,4,5,6,7,8,9,10]) == 300
    assert sum_squares([15,17,-19,15,-18,16,-17,19,-14,-13,-18]) == 1296
    assert sum_squares([15,17,-19,15,-18,16,-17,19,-14,15]) == 1088

  def test53(self):
    # Tests the above function
    assert sum_squares([2,5,8]) == 64
    assert sum_squares([3,7,11]) == 243
    assert sum_squares([4,8,12]) == 484

Task_id: 143

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert words_in_sentence("program") == "program"
    assert words_in_sentence("data") == "data"
    assert words_in_sentence("language") == "language"

  def test2(self):
    # Tests the above function
    assert words_in_sentence("python") == "python"
    assert words_in_sentence("little") == "little"
    assert words_in_sentence("big") == "big"

Task_id: 144

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert simplify("13/15","1/3") == True
    assert simplify("4/5","2/3") == True
    assert simplify("10/14","1/2") == False

  def test2(self):
    # Tests the above function
    assert simplify("12/15","1/3") == True
    assert simplify("4/5","2/3") == True
    assert simplify("10/14","1/2") == False

Task_id: 145

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert order_by_points([19991, -5678, 991, -5356, -8999, 1231, 7895, 1])==[-8999, 1, 991, 1231, 19991, 7895, -5678, -5356]
    assert order_by_points([100,200,300,400,500,600,700,800,900])==[100, 200, 300, 400, 500, 600, 700, 800, 900]
    assert order_by_points([1,2,3,4,5,6,7,8,9])==[1, 2, 3, 4, 5, 6, 7, 8, 9]

  def test441(self):
    # Tests the above function
    assert order_by_points([12,15,18,14,15,17])==[12, 14, 15, 15, 17, 18]

Task_id: 146

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert specialFilter([121,123,125,127,129,131,133,135,137,139]) == 5
    assert specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0
    assert specialFilter([101,103,105,107,109,111,113,115,117,119]) == 5

  def test592(self):
    # Tests the above function
    assert specialFilter([210,211,212,213,214,215,216,217,218,219]) == 0
    assert specialFilter([211,212,213,214,215,216,217,218,219,220]) == 1
    assert specialFilter([221,222,223,224,225,226,227,228,229,230]) == 10

  def test592(self):
    # Tests the above function
    assert specialFilter([310,311,312,313,314,315,316,317,318,319]) == 0

Task_id: 147

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert get_max_triples(4) == 6
    assert get_max_triples(5) == 15
    assert get_max_triples(10) == 54

  def test2(self):
    assert get_max_triples(100) == 3250
    assert get_max_triples(15) == 750
    assert get_max_triples(50) == 2500

Task_id: 148

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert bf("Mercury","Venus")==('Venus', 'Mercury')
    assert bf("Mars","Uranus")==('Uranus', 'Mars')
    assert bf("Neptune","Uranus")==('Uranus', 'Neptune')

Task_id: 149

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert sorted_list_sum([[1, 3], [5, 7], [9, 11, 13], [15, 17], [19, 21, 23]])==[[1, 3], [15, 17], [9, 11, 13]]
    assert sorted_list_sum([['x', 'y'], ['m', 'n'], ['a', 'b', 'c'], ['z']])==[['a', 'b', 'c'], ['x', 'y'], ['m', 'n']]
    assert sorted_list_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11]])==[[1, 2, 3], [6, 7, 8, 9], [4, 5], [10, 11]]

  def test2(self):
    # Tests the above function
    assert sorted_list_sum([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11]])==[[1, 2, 3], [6, 7, 8, 9], [4, 5], [10, 11]]
    assert sorted_list_sum([['x', 'y'], ['m', 'n'], ['a', 'b', 'c'], ['z']])==[['a', 'b', 'c'], ['x', 'y'], ['m', 'n']]

Task_id: 150

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert x_or_y(13, 10, 20) == 20
    assert x_or_y(5, 10, 20) == 10
    assert x_or_y(2, 10, 20) == 20

  def test2(self):
    # Tests the above function
    assert x_or_y(1, 10, 20) == 10
    assert x_or_y(2, 10, 20) == 10
    assert x_or_y(3, 10, 20) == 10

  def test3(self):
    # Invokes the above function
    assert x_or_y(4, 10, 20) == 20
    assert x_or_y(7, 10, 20) == 10
    assert x_or_y(19, 10, 20) == 10

Task_id: 151

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert double_the_difference([1.5, 2, -8, 10, -3]) == 66.25
    assert double_the_difference([1, 2, 3, 5, 7, 8, 9, 10]) == 60
    assert double_the_difference([15, 17, 19, 18, 25, 27]) == 144

  def test773(self):
    # Tests the above function
    assert double_the_difference([2.1, 1.2, -4.5, 0.7, -3.2]) == 21.04
    assert double_the_difference([2, 3, 5, 7, 9, 11]) == 30
    assert double_the_difference([16, 18, 20, 17, 36, 39]) == 144

  def test528(self):
    # Tests the above function
    assert double_the_difference([1.5, 2, -8, 10, -3,12.15,14.17]) == 132.55
    assert double_the_difference([1, 2, 3, 5, 7, 8, 9, 10,12.15,14.17]) == 84
    assert double_the_difference([15, 17, 19, 18, 25, 27,12.15,14.17]) == 196

Task_id: 152

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert compare((1,2,3),(1,1,1)) == [0,1,2]
    assert compare((15,17,19),(10,15,13)) == [5,2,6]
    assert compare((10,15,13),(15,10,19)) == [0,5,6]

  def test2(self):
    # Tests the above function
    assert compare((19,15,18),(15,10,19)) == [4,5,9]
    assert compare((12,15,19),(15,14,13)) == [1,1,6]
    assert compare((15,17,19),(14,15,13)) == [1,0,6]

  def test3(self):
    assert compare((18,17,15),(15,14,13)) == [3,3,2]
    assert compare((14,15,19),(15,10,13)) == [0,5,6]
    assert compare((15,17,13),(15,10,19)) == [0,5,6]

Task_id: 153

class Tests(unittest.TestCase):
  def test1(self):
    pass

Task_id: 154

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert cycpattern_check("abcabcabc" , "abc") == True
    assert cycpattern_check("abcd" , "abc") == False
    assert cycpattern_check("abcd" , "cdba") == False

  def test2(self):
    # Tests the above function
    assert cycpattern_check("abcab" , "aba") == True
    assert cycpattern_check("abcd" , "cdba") == False
    assert cycpattern_check("abcd" , "cdba") == False

Task_id: 155

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert even_odd_count(1321)==(2,3)
    assert even_odd_count(-1010)==(3,5)
    assert even_odd_count(-12012)==(5,7)

  def test121(self):
    # Tests the above function
    assert even_odd_count(12)==(1,2)
    assert even_odd_count(-120)==(3,5)
    assert even_odd_count(-12012)==(5,7)

  def test883(self):
    # Tests the above function
    assert even_odd_count(100)==(2,1)
    assert even_odd_count(-1001)==(4,5)
    assert even_odd_count(-120120)==(7,9)

  def test951(self):
    # Tests the above function
    assert even_odd_count(99)==(4,5)
    assert even_odd_count(-999)==(7,10)
    assert even_odd_count(-999999)==(14,16)

  def test883(self):
    # Tests the above function
    assert even_odd_count(12121)==(4,6)
    assert even_odd_count(-1212121)==(8,11)
    assert even_odd_count(-12121212121)==(20,25)

  def test9(self):
    # Tests the above function
    assert even_odd_count(123)==(2,1)
    assert even_odd_count(-1234)==(4,6)
    assert even_odd_count(-123456)==(7,9)

Task_id: 156

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert int_to_mini_roman(1)==('i')
    assert int_to_mini_roman(5)==('v')
    assert int_to_mini_roman(100)==('c')

  def test2(self):
    # Tests the above function
    assert int_to_mini_roman(4)==('iv')
    assert int_to_mini_roman(2000)==('mmm')
    assert int_to_mini_roman(600)==('dc')

  def test3(self):
    assert int_to_mini_roman(3000)==('mmm')
    assert int_to_mini_roman(2500)==('mmd')
    assert int_to_mini_roman(1899)==('mcmlxxxix')

  def test3(self):
    assert int_to_mini_roman(1250)==('mxc')
    assert int_to_mini_roman(1990)==('mcmxc')
    assert int_to_mini_roman(1584)==('mdccclxxxiv')

  def test3(self):
    assert int_to_mini_roman(1495)==('mcdxc5')
    assert int_to_mini_roman(1453)==('mcdliii')

Task_id: 157

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert right_angle_triangle(3,4,5)==False
    assert right_angle_triangle(10,20,30)==True
    assert right_angle_triangle(15,25,35)==True

  def test121(self):
    # Tests the above function
    assert right_angle_triangle(9,10,14)==False
    assert right_angle_triangle(15,17,19)==True

  def test831(self):
    # Tests the above function
    assert right_angle_triangle(10,14,13)==False

  def test214(self):
    # Tests the above function
    assert right_angle_triangle(18,21,29)==False

  def test404(self):
    # Tests the above function
    assert right_angle_triangle(15,27,39)==False

  def test579(self):
    # Tests the above function
    assert right_angle_triangle(12,15,17)==False

  def test628(self):
    # Tests the above function
    assert right_angle_triangle(18,24,30)==False

  def test381(self):
    # Tests the above function
    assert right_angle_triangle(14,18,22)==False

  def test910(self):
    # Tests the above function
    assert right_angle_triangle(17,25,30)==False

  def test186(self):
    # Tests the above function
    assert right_angle_triangle(19,26,35)==False

Task_id: 158

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert find_max(["win","lose","great"]) == 'win'
    assert find_max(["a","ab","abc","aba"]) == 'ab'
    assert find_max(["z","aa","bbb"]) == 'aa'

  def test2(self):
    # Tests the above function
    assert find_max(["python","program","language"]) == 'python'
    assert find_max(["big","data","hadoop"]) == 'big'
    assert find_max(["hadoop","ab","aba"]) == 'hadoop'

  def test3(self):
    assert find_max(["little","ab","aaa"]) == 'little'
    assert find_max(["xyz","aba","abc"]) == 'aba'
    assert find_max(["z","aa","bbb"]) == 'aa'

Task_id: 159

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert eat(10,20,50)==[30,30]
    assert eat(10,5,50)==[15,45]
    assert eat(10,110,50)==[120,0]

  def test2(self):
    # Tests the above function
    assert eat(10,120,50)==[120,0]
    assert eat(10,70,50)==[80,20]
    assert eat(10,150,50)==[250,0]

Task_id: 160

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert do_algebra('+', [1, 2, 3]) == 6
    assert do_algebra('-', [15, 12, 13]) == 2
    assert do_algebra('*', [1, 2, 3]) == 6

  def test692(self):
    # Tests the above function
    assert do_algebra('+', [15, 12, 13]) == 2
    assert do_algebra('-', [15, 12, 13]) == 2
    assert do_algebra('*', [1, 2, 3]) == 6


Task_id: 161

class Tests(unittest.TestCase):
  def test1(self):

	# Tests the above function
    assert solve("Python") == "python"
    assert solve("Program") == "program"
    assert solve("Language") == "language"

  def test2(self):
    # Tests the above function
    assert solve("Programming") == "programming"
    assert solve("Data") == "Data"
    assert solve("Language") == "Language"

Task_id: 162

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert string_to_md5("python") == 'd2d071b8665f30eaec3929c9feeb119'
    assert string_to_md5("programming") == 'd41d8cd98f80b204e9800998ecf8427e'
    assert string_to_md5("") == 'd41d8cd98f80b204e9800998ecf8427e'


Task_id: 163

class Tests(unittest.TestCase):
  def test1(self):

 # Tests the above function
    assert generate_integers(5,2)==[4, 6]
    assert generate_integers(1,1)==[2]
    assert generate_integers(11,9)==[8, 10]

  def test2(self):
    assert generate_integers(19,15)==[18, 16, 14, 12, 10, 8, 6]
    assert generate_integers(1,9)==[2, 4, 6, 8]
    assert generate_integers(9,19)==[10, 12, 14, 16, 18]

  def test3(self):
    assert generate_integers(15,19)==[16, 18]
    assert generate_integers(15,15)==[16]
    assert generate_integers(19,19)==[18, 19]

  def test4(self):
    assert generate_integers(13,15)==[14]
    assert generate_integers(18,18)==[18]
    assert generate_integers(17,15)==[16, 18]

  def test5(self):
    assert generate_integers(14,14)==[14]
    assert generate_integers(12,12)==[12]
    assert generate_integers(16,16)==[16]
