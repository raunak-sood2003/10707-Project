Task_id: 0

class Tests(unittest.TestCase):
    def test_1(self):
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True
        assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.5) == True

Task_id: 1
class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(separate_paren_groups('(a)(b)'), ['(a)', '(b)'])

    def test_2(self):
        self.assertEqual(separate_paren_groups('(a)(b)'), ['(a)', '(b)'])

    def test_3(self):
        self.assertEqual(separate_paren_groups('(a)(b)(c)'), ['(a)', '(b)', '(c)'])

    def test_4(self):
        self.assertEqual(separate_paren_groups('(a)(b)(c)(d)'), ['(a)', '(b)', '(c)', '(d)'])

    def test_5(self):
        self.assertEqual(separate_paren_groups('(a)(b)(c)(d)(e)'), ['(a)', '(b)', '(c)', '(d)', '(e)'])

Task_id: 2
class TruncateNumberTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(truncate_number(1.23456789), 0.23456789)

    def test_case_2(self):
        self.assertEqual(truncate_number(1.23456789), 0.23456789)

    def test_case_3(self):
        self.assertEqual(truncate_number(1.234567899), 0.234567899)

    def test_case_4(self):
        self.assertEqual(truncate_number(1.2345678999), 0.23456780)

    def test_case_5(self):
        self.assertEqual(truncate_number(1.23456789999), 0.23456780)

Task_id: 3

class Tests(unittest.TestCase):
    def test_below_zero_1():
        operations = [1, 2, 3, 4, 5]
        assert below_zero(operations) == False

    def test_below_zero_2():
        operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        assert below_zero(operations) == True

    def test_below_zero_3():
        operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        assert below_zero(operations) == True

Task_id: 4

class MyTest(unittest.TestCase):
    def test_mean_absolute_deviation(self):
        self.assertEqual(mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]), 15.8113256706541)

Task_id: 5

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(intersperse([1, 2, 3, 4], 0), [1, 0, 2, 0, 3, 0, 4])

    def test_case_2(self):
        self.assertEqual(intersperse([1, 2, 3, 4, 5], 0), [1, 0, 2, 0, 3, 0, 4, 0, 5])

    def test_case_3(self):
        self.assertEqual(intersperse([1, 2, 3, 4, 5, 6], 0), [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6])

    def test_case_4(self):
        self.assertEqual(intersperse([1, 2, 3, 4, 5, 6, 7], 0), [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7])

    def test_case_5(self):
        self.assertEqual(intersperse([1, 2, 3, 4, 5, 6, 7, 8], 0), [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8])

Task_id: 6

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(parse_nested_parens('(())'), 2)

    def test_case_2(self):
        self.assertEqual(parse_nested_parens('()()'), 2)

    def test_case_3(self):
        self.assertEqual(parse_nested_parens('()()()'), 3)

    def test_case_4(self):
        self.assertEqual(parse_nested_parens('((()))'), 3)

    def test_case_5(self):
        self.assertEqual(parse_nested_parens('((()))()'), 3)

Task_id: 7

class MyTest(unittest.TestCase):
    def test_case_1(self):
        strings = ['abc', 'ab', 'bc', 'def', 'abcd']
        substring = 'ab'
        expected = ['abc', 'ab', 'abcd']
        self.assertEqual(filter_by_substring(strings, substring), expected)

    def test_case_2(self):
        strings = ['abc', 'ab', 'bc', 'def', 'abcd']
        substring = 'bc'
        expected = ['abc', 'bc', 'abcd']
        self.assertEqual(filter_by_substring(strings, substring), expected)

    def test_case_3(self):
        strings = ['abc', 'ab', 'bc', 'def', 'abcd']
        substring = 'cd'
        expected = ['abc', 'abcd']
        self.assertEqual(filter_by_substring(strings, substring), expected)

    def test_case_4(self):
        strings = ['abc', 'ab', 'bc', 'def', 'abcd']
        substring = 'ef'
        expected = ['abc', 'def', 'abcd']
        self.assertEqual(filter_by_substring(strings, substring), expected)

    def test_case_5(self):
        strings = ['abc', 'ab', 'bc', 'def', 'abcd']
        substring = 'efg'
        expected = ['abc', 'ab', 'bc', 'def', 'abcd']
        self.assertEqual(filter_by_substring(strings, substring), expected)

Task_id: 8

class MyTest(unittest.TestCase):
    def test_sum_product(self):
        self.assertEqual(sum_product([1, 2, 3, 4]), (10, 24))
        self.assertEqual(sum_product([10, 20, 30, 40, 50]), (150, 2000000000))

Task_id: 9

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

    def test_2(self):
        self.assertEqual(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
    
    def test_3(self):
        self.assertEqual(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]),
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])

Task_id: 10

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(is_palindrome('abcd'), 'abcdba')

    def test_case_2(self):
        self.assertEqual(is_palindrome('abc'), 'abcba')

    def test_case_3(self):
        self.assertEqual(is_palindrome('ab'), 'ab')

    def test_case_4(self):
        self.assertEqual(is_palindrome(''), '')

    def test_case_5(self):
        self.assertEqual(is_palindrome('a'), 'a')

Task_id: 11

class Tests(unittest.TestCase):
    def test_0(self):
        self.assertEqual(string_xor('1010', '0101'), '1111')

    def test_1(self):
        self.assertEqual(string_xor('1010', '0101'), '1010')

    def test_2(self):
        self.assertEqual(string_xor('1111', '1111'), '0000')

    def test_3(self):
        self.assertEqual(string_xor('1111', '1111'), '0000')

    def test_4(self):
        self.assertEqual(string_xor('10101010', '010101010'), '11111111')

    def test_5(self):
        self.assertEqual(string_xor('10101010', '01010101'), '1111111')

Task_id: 12

class LongestTest(unittest.TestCase):
    def test_longest(self):
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")
        self.assertEqual(longest(["abc", "ab", "a", "abcd"]), "abcd")

Task_id: 13

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(greatest_common_divisor(10, 15), 5)

    def test_case_2(self):
        self.assertEqual(greatest_common_divisor(10, 10), 10)

    def test_case_3(self):
        self.assertEqual(greatest_common_divisor(10, 20), 10)

    def test_case_4(self):
        self.assertEqual(greatest_common_divisor(10, 20), 10)

    def test_case_5(self):
        self.assertEqual(greatest_common_divisor(10, 20), 10)

Task_id: 14

class AllPrefixesTest(unittest.TestCase):
    def test_case(self):
        result = all_prefixes('abc')
        self.assertEqual(result, ['a', 'ab', 'abc'])

    def test_case_1(self):
        result = all_prefixes('abcd')
        self.assertEqual(result, ['a', 'ab', 'abc', 'abcd'])

    def test_case_2(self):
        result = all_prefixes('')
        self.assertEqual(result, [])

    def test_case_3(self):
        result = all_prefixes('a')
        self.assertEqual(result, ['a'])

    def test_case_4(self):
        result = all_prefixes('abcde')
        self.assertEqual(result, ['a', 'ab', 'abc', 'abcd', 'abcde'])

Task_id: 15

class StringSequenceTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(string_sequence(1), '1')

    def test_case_2(self):
        self.assertEqual(string_sequence(2), '1 2')

    def test_case_3(self):
        self.assertEqual(string_sequence(3), '1 2 3')

    def test_case_4(self):
        self.assertEqual(string_sequence(4), '1 2 3 4')

    def test_case_5(self):
        self.assertEqual(string_sequence(5), '1 2 3 4 5')

Task_id: 16

class CountDistinctCharactersTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(count_distinct_characters('abcd'), 4)

    def test_case_2(self):
        self.assertEqual(count_distinct_characters('aA1!'), 4)

    def test_case_3(self):
        self.assertEqual(count_distinct_characters(''), 0)

    def test_case_4(self):
        self.assertEqual(count_distinct_characters('a'), 1)

    def test_case_5(self):
        self.assertEqual(count_distinct_characters('abcdA1!'), 6)

Task_id: 17

class Tests(unittest.TestCase):
    def test_0(self):
        pass

Task_id: 18

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(how_many_times('abcdefg', 'cd'), 1)

    def test_2(self):
        self.assertEqual(how_many_times('abcdefg', 'cd'), 0)

    def test_3(self):
        self.assertEqual(how_many_times('abcdefg', 'ef'), 1)

    def test_4(self):
        self.assertEqual(how_many_times('abcdefg', 'efg'), 0)

    def test_5(self):
        self.assertEqual(how_many_times('abcdefg', 'abc'), 0)

Task_id: 19

class Tests(unittest.TestCase):
    def test_0(self):
        self.assertEqual(sort_numbers('one two three four five six seven eight nine zero'),
        'zero one two three four five six seven eight nine')

Task_id: 20

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), (1, 2))
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), (1, 2))
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), (1, 2))
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), (1, 2))

Task_id: 21


Task_id: 22
class Tests(unittest.TestCase):
    def test_1(self):
        assert filter_integers([1, 2, 3, 4.5, 5, 6.7, "a", "b", "c"]) == [1, 2, 3, 4, 5, 6]
        assert filter_integers([1, 2, 3, 4.5, 5, 6.7, "a", "b", "c"]) == [1, 2, 3, 4, 5, 6]
        assert filter_integers([1, 2, 3, 4.5, 5, 6.7, "a", "b", "c"]) == [1, 2, 3, 4, 5, 6]
        assert filter_integers([1, 2, 3, 4.5, 5, 6.7, "a", "b", "c"]) == [1, 2, 3, 4, 5, 6]
        assert filter_integers([1, 2, 3, 4.5, 5, 6.7, "a", "b", "c"]) == [1, 2, 3, 4, 5, 6]

Task_id: 23

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(strlen('abc'), 3)

    def test_case_2(self):
        self.assertEqual(strlen(''), 0)

    def test_case_3(self):
        self.assertEqual(strlen('a'), 1)

    def test_case_4(self):
        self.assertEqual(strlen('abcd'), 4)

    def test_case_5(self):
        self.assertEqual(strlen('a'*1000), 1000)
   
Task_id: 24

class LargestDivisorTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(largest_divisor(10), 5)

    def test_case_2(self):
        self.assertEqual(largest_divisor(15), 3)

    def test_case_3(self):
        self.assertEqual(largest_divisor(20), 4)

    def test_case_4(self):
        self.assertEqual(largest_divisor(12), 3)

    def test_case_5(self):
        self.assertEqual(largest_divisor(100), 10)

Task_id: 25

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(factorize(10), [2, 5])

    def test_case_2(self):
        self.assertEqual(factorize(12), [2, 2, 3])

    def test_case_3(self):
        self.assertEqual(factorize(15), [3, 5])

    def test_case_4(self):
        self.assertEqual(factorize(24), [2, 2, 2, 3])

    def test_case_5(self):
        self.assertEqual(factorize(100), [2, 2, 5, 5, 5])

Task_id: 26

class Tests(unittest.TestCase):
    def test_1(self):
        assert remove_duplicates([1, 1, 2, 3, 3]) == [1, 2, 3]
        assert remove_duplicates([1, 2, 2, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]

Task_id: 27

class FlipCaseTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(flip_case('Python'), 'pYTHON')

    def test_case_2(self):
        self.assertEqual(flip_case('Google'), 'gOOgle')

    def test_case_3(self):
        self.assertEqual(flip_case('Academy'), 'aCaDeMy')

    def test_case_4(self):
        self.assertEqual(flip_case('Zoo'), 'zOO')

    def test_case_5(self):
        self.assertEqual(flip_case('Code'), 'cODE')

Task_id: 28

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(concatenate(["abc", "def"]), "abcdef")

    def test_case_2(self):
        self.assertEqual(concatenate(["abc", "def", "ghi"]), "abcdefghi")

    def test_case_3(self):
        self.assertEqual(concatenate(["abc", "def", "ghi", "jkl"]), "abcdefghijkl")

    def test_case_4(self):
        self.assertEqual(concatenate(["abc", "def", "ghi", "jkl", "mno"]), "abcdefghijklmno")

    def test_case_5(self):
        self.assertEqual(concatenate(["abc", "def", "ghi", "jkl", "mno", "pqr"]), "abcdefghijklm")

Task_id: 29

class MyTest(unittest.TestCase):
    def test_case_1(self):
        strings = ['abc', 'abcd', 'ab', 'abcdef']
        prefix = 'ab'
        self.assertEqual(filter_by_prefix(strings, prefix), ['abc', 'abcd', 'ab'])

    def test_case_2(self):
        strings = ['abc', 'abcd', 'ab', 'abcdef']
        prefix = 'abc'
        self.assertEqual(filter_by_prefix(strings, prefix), ['abc', 'abcd', 'abcdef'])

    def test_case_3(self):
        strings = ['abc', 'abcd', 'ab', 'abcdef']
        prefix = 'abcd'
        self.assertEqual(filter_by_prefix(strings, prefix), ['abcd'])

    def test_case_4(self):
        strings = ['abc', 'abcd', 'ab', 'abcdef']
        prefix = 'ab'
        self.assertEqual(filter_by_prefix(strings, prefix), ['abc', 'abcd', 'ab'])

    def test_case_5(self):
        strings = ['abc', 'abcd', 'ab', 'abcdef']
        prefix = 'abc'
        self.assertEqual(filter_by_prefix(strings, prefix), ['abc', 'abcd', 'abcdef'])


Task_id: 30

class Tests(unittest.TestCase):
    def test_1(self):
        assert get_positive([1, 2, 3, -1, 0, 4, -5]) == [1, 2, 3, 4]
        assert get_positive([-1, 0, 1, 2, 3]) == [1, 2, 3]
        assert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Task_id: 31

class Tests(unittest.TestCase):
    def test_1(self):
        #Test case 1:
        assert is_prime(11) == True
    def test_1(self):
        #Test case 2:
        assert is_prime(12) == False
    def test_3(self):
        #Test case 3:
        assert is_prime(13) == True
    def test_4(self):
        #Test case 4:
        assert is_prime(14) == False
    def test_5(self):
        #Test case 5:
        assert is_prime(15) == True


Task_id: 32

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        x = 5.5
        expected = 5.25
        self.assertAlmostEqual(expected, poly(xs, x), delta=1e-6)

    def test_case_2(self):
        xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        x = 5.5
        expected = 5.25
        self.assertAlmostEqual(expected, poly(xs, x), delta=1e-6)

    def test_case_3(self):
        xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        x = 5.5
        expected = 5.25
        self.assertAlmostEqual(expected, poly(xs, x), delta=1e-6)

    def test_case_4(self):
        xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        x = 5.5
        expected = 5.25
        self.assertAlmostEqual(expected, poly(xs, x), delta=1e-6)

    def test_case_5(self):
        xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        x = 5.5
        expected = 5.25
        self.assertAlmostEqual(expected, poly(xs, x), delta=1e-6)

Task_id: 33

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 2, 5, 4, 7, 6, 9, 8, 10])

    def test_case_2(self):
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11])

    def test_case_3(self):
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 12])

    def test_case_4(self):
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 12, 13])

    def test_case_5(self):
        self.assertEqual(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 12, 13, 14])

Task_id: 34

class Tests(unittest.TestCase):
    def test_unique(self):
        assert unique([1, 1, 2, 3, 4, 4]) == [1, 2, 3, 4]
        assert unique([1, 1, 2, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]
        assert unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Task_id: 35

class Tests(unittest.TestCase):
    def test_case_1(self):
        l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        expected = 10
        assert max_element(l) == expected


    def test_case_2(self):
        l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        expected = 11
        assert max_element(l) == expected


Task_id: 36

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(fizz_buzz(10), 2)

    def test_case_2(self):
        self.assertEqual(fizz_buzz(15), 3)

    def test_case_3(self):
        self.assertEqual(fizz_buzz(20), 4)

    def test_case_4(self):
        self.assertEqual(fizz_buzz(25), 5)

    def test_case_5(self):
        self.assertEqual(fizz_buzz(30), 6)

Task_id: 37

class MyTest(unittest.TestCase):
    def test_sort_even(self):
        assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]
        assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 4, 6, 8, 10, 11]
        assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 4, 6, 8, 10, 12]
        assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [2, 4, 6, 8, 10, 12, 14]
        assert sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [2, 4, 6, 8, 10, 12, 14, 15]

Task_id: 38

class Tests(unittest.TestCase):
    def test_0(self):
        self.assertEqual(encode_cyclic('abcd'), 'abcd')
    def test_1(self):
        self.assertEqual(encode_cyclic('abcd'), 'abcd')
    def test_2(self):
        self.assertEqual(encode_cyclic('ab'), 'ab')
    def test_3(self):
        self.assertEqual(encode_cyclic('a'), 'a')
    def test_4(self):
        self.assertEqual(encode_cyclic(''), '')

Task_id: 39

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(prime_fib(1), 2)

    def test_case_2(self):
        self.assertEqual(prime_fib(2), 3)

    def test_case_3(self):
        self.assertEqual(prime_fib(3), 11)

    def test_case_4(self):
        self.assertEqual(prime_fib(4), 13)

    def test_case_5(self):
        self.assertEqual(prime_fib(5), 23)

Task_id: 40

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(triples_sum_to_zero([1, 2, 3, 4]), True)

    def test_case_2(self):
        self.assertEqual(triples_sum_to_zero([1, 2, 3, 4, 5]), False)

    def test_case_3(self):
        self.assertEqual(triples_sum_to_zero([-1, 2, 3, 4, 5]), True)

    def test_case_4(self):
        self.assertEqual(triples_sum_to_zero([-1, -2, -3, -4, -5]), False)

    def test_case_5(self):
        self.assertEqual(triples_sum_to_zero([-1, -2, -3, -4, -5, -6]), True)


Task_id: 41

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(car_race_collision(10), 100)

    def test_case_2(self):
        self.assertEqual(car_race_collision(20), 4000)

    def test_case_3(self):
        self.assertEqual(car_race_collision(30), 9000)

    def test_case_4(self):
        self.assertEqual(car_race_collision(40), 16000)

    def test_case_5(self):
        self.assertEqual(car_race_collision(50), 25000)

Task_id: 42

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(incr_list([1, 2, 3]), [2, 3, 4])
    def test_2(self):
        self.assertEqual(incr_list([1, 2, 3, 4, 5]), [2, 3, 4, 5, 6])
    def test_3(self):
        self.assertEqual(incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9]), [2, 3, 4, 5, 6, 7, 8, 9, 10])

Task_id: 43

class PairsSumToZeroTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), True)

    def test_2(self):
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), True)

    def test_3(self):
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), True)

    def test_4(self):
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), True)

    def test_5(self):
        self.assertEqual(pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), True)

Task_id: 44

class MyTest(unittest.TestCase):
    def test_case_0(self):
        self.assertEqual(change_base(10, 2), '1010')

    def test_case_1(self):
        self.assertEqual(change_base(1234567890, 16), '49243bca51')

Task_id: 45

class TriangleAreaTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(triangle_area(5, 10), 25.0)

    def test_case_2(self):
        self.assertEqual(triangle_area(10, 20), 100.0)

    def test_case_3(self):
        self.assertEqual(triangle_area(100, 200), 20000.0)

    def test_case_4(self):
        self.assertEqual(triangle_area(1000, 2000), 2000000.0)

    def test_case_5(self):
        self.assertEqual(triangle_area(10000, 20000), 200000000.0)

Task_id: 46

class FibonacciTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(fib4(1), 0)

    def test_case_2(self):
        self.assertEqual(fib4(2), 0)

    def test_case_3(self):
        self.assertEqual(fib4(3), 2)

    def test_case_4(self):
        self.assertEqual(fib4(4), 0)

    def test_case_5(self):
        self.assertEqual(fib4(5), 2)

Task_id: 47

class MyTest(unittest.TestCase):
    def test_0(self):
        assert median([1, 2, 3, 4, 5]) == 3
        assert median([1, 2, 3, 4, 5, 6]) == 3.5
        assert median([1, 2, 3, 4, 5, 6, 7]) == 3.5
        assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 4
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6.5
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7.5
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 8.5
        assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 9.5

Task_id: 48

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(is_palindrome('abba'), True)

    def test_case_2(self):
        self.assertEqual(is_palindrome('abcd'), False)

    def test_case_3(self):
        self.assertEqual(is_palindrome('abcba'), True)

    def test_case_4(self):
        self.assertEqual(is_palindrome(''), True)

    def test_case_5(self):
        self.assertEqual(is_palindrome('a'), True)

Task_id: 49

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(modp(1, 10), 1)

    def test_2(self):
        self.assertEqual(modp(2, 10), 2)

    def test_3(self):
        self.assertEqual(modp(3, 10), 4)

    def test_4(self):
        self.assertEqual(modp(4, 10), 8)

    def test_5(self):
        self.assertEqual(modp(5, 10), 5)

Task_id: 50

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(encode_shift('abc'), 'fgh')
    def test_case_2(self):
        self.assertEqual(encode_shift('def'), 'jkl')
    def test_case_3(self):
        self.assertEqual(encode_shift('ghi'), 'mno')
    def test_case_4(self):
        self.assertEqual(encode_shift('jkl'), 'def')
    def test_case_5(self):
        self.assertEqual(encode_shift('mno'), 'ghi')

Task_id: 51

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(below_threshold([1, 2, 3, 4, 5], 3), True)

    def test_2(self):
        self.assertEqual(below_threshold([1, 2, 3, 4, 5], 4), True)

    def test_3(self):
        self.assertEqual(below_threshold([1, 2, 3, 4, 5], 5), True)

    def test_4(self):
        self.assertEqual(below_threshold([1, 2, 3, 4, 5], 6), False)

    def test_5(self):
        self.assertEqual(below_threshold([1, 2, 3, 4, 5], 10), False)

Task_id: 53

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(add(10, 20), 30)

    def test_case_2(self):
        self.assertEqual(add(10, 20), 30)

    def test_case_3(self):
        self.assertEqual(add(10, 20), 30)

    def test_case_4(self):
        self.assertEqual(add(10, 20), 30)

    def test_case_5(self):
        self.assertEqual(add(10, 20), 30)

Task_id: 54

class SameCharsTest(unittest.TestCase):
    def test_same_chars(self):
        self.assertTrue(same_chars('abc', 'abc'))
        self.assertFalse(same_chars('abc', 'abcd'))
        self.assertTrue(same_chars('abc', 'ab'))
        self.assertFalse(same_chars('abc', 'abcd'))
        self.assertTrue(same_chars('abc', 'abcd'))

Task_id: 55

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(fib(2), 1)

    def test_case_2(self):
        self.assertEqual(fib(3), 2)

    def test_case_3(self):
        self.assertEqual(fib(4), 3)

    def test_case_4(self):
        self.assertEqual(fib(5), 5)

    def test_case_5(self):
        self.assertEqual(fib(6), 8)

Task_id: 56

class MyTest(unittest.TestCase):
    def test_case_1(self):
        #Test case 1:
        assert correct_bracketing('<') == False
        #Test case 2:
        assert correct_bracketing('<<') == False
        #Test case 3:
        assert correct_bracketing('<<<') == False
        #Test case 4:
        assert correct_bracketing('<>>') == False
        #Test case 5:
        assert correct_bracketing('<>>>') == False
        #Test case 6:
        assert correct_bracketing('<>>>>') == False
        #Test case 7:
        assert correct_bracketing('<>>>>>') == False
        #Test case 8:
        assert correct_bracketing('<>>>>>>') == False
        #Test case 9:
        assert correct_bracketing('<>>>>>>>') == False
        #Test case 10:
        assert correct_bracketing('<>>>>>>>>') == False
        #Test case 11:
        assert correct_bracketing('<>>>>>>>>>') == False
        #Test case 12:
        assert correct_bracketing('<>>>>>>>>>>') == False
        #Test case 13:
        assert correct_bracketing('<>>>>>>>>>>>>') == False
        #Test case 14:
        assert correct_bracketing('<>>>>>>>>>>>>>') == False
        #Test case 15:
        assert correct_bracketing('<>>>>>>>>>>>>>>') == False

Task_id: 57

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(monotonic([1, 2, 3, 4, 5]), True)

    def test_2(self):
        self.assertEqual(monotonic([5, 4, 3, 2, 1]), True)

    def test_3(self):
        self.assertEqual(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), True)

    def test_4(self):
        self.assertEqual(monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), True)

    def test_5(self):
        self.assertEqual(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), True)

Task_id: 58

class MyTest(unittest.TestCase):
    def test_case_1(self):
        l1 = [1, 2, 3, 4, 5]
        l2 = [2, 3, 4, 5, 6]
        expected_output = [2, 3, 4, 5]
        assert expected_output == common(l1, l2)

    def test_case_2(self):
        l1 = [1, 2, 3, 4, 5, 6]
        l2 = [2, 3, 4, 5, 6, 7]
        expected_output = [2, 3, 4, 5, 6]
        assert expected_output == common(l1, l2)

    def test_case_3(self):
        l1 = [1, 2, 3, 4, 5, 6, 7]
        l2 = [2, 3, 4, 5, 6, 7, 8]
        expected_output = [2, 3, 4, 5, 6, 7]
        assert expected_output == common(l1, l2)

    def test_case_4(self):
        l1 = [1, 2, 3, 4, 5, 6, 7, 8]
        l2 = [2, 3, 4, 5, 6, 7, 8, 9]
        expected_output = [2, 3, 4, 5, 6, 7, 8]
        assert expected_output == common(l1, l2)

    def test_case_5(self):
        l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        l2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        expected_output = [2, 3, 4, 5, 6, 7, 8, 9]
        assert expected_output == common(l1, l2)

Task_id: 59

class LargestPrimeFactorTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(largest_prime_factor(10), 5)

    def test_case_2(self):
        self.assertEqual(largest_prime_factor(12), 3)

    def test_case_3(self):
        self.assertEqual(largest_prime_factor(100), 5)

    def test_case_4(self):
        self.assertEqual(largest_prime_factor(1000), 5)

    def test_case_5(self):
        self.assertEqual(largest_prime_factor(10000), 5)

Task_id: 60

class MyTest(unittest.TestCase):
    def test_sum_to_n(self):
        self.assertEqual(sum_to_n(1), 1)
        self.assertEqual(sum_to_n(2), 3)
        self.assertEqual(sum_to_nn(3), 6)
        self.assertEqual(sum_to_n(4), 10)
        self.assertEqual(sum_to_n(5), 15)

Task_id: 61

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(correct_bracketing("()"), True)

    def test_case_2(self):
        self.assertEqual(correct_bracketing("(())"), True)

    def test_case_3(self):
        self.assertEqual(correct_bracketing("(()))"), True)

    def test_case_4(self):
        self.assertEqual(correct_bracketing("(()))("), False)

    def test_case_5(self):
        self.assertEqual(correct_bracketing("()"), True)
   
Task_id: 62

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(derivative([1, 2, 3, 4]), [2, 3, 4])

    def test_case_2(self):
        self.assertEqual(derivative([1, 2, 3, 4, 5]), [2, 3, 4, 5])

    def test_case_3(self):
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6]), [2, 3, 4, 5, 6])

    def test_case_4(self):
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7]), [2, 3, 4, 5, 6, 7])

    def test_case_5(self):
        self.assertEqual(derivative([1, 2, 3, 4, 5, 6, 7, 8]), [2, 3, 4, 5, 6, 7, 8])

Task_id: 63

class MyTest(unittest.TestCase):
    def test_fibfib(self):
        #Test case 1:
        self.assertEqual(fibfib(0), 0)
        #Test case 2:
        self.assertEqual(fibfib(1), 0)
        #Test case 3:
        self.assertEqual(fibfib(2), 1)
        #Test case 4:
        self.assertEqual(fibfib(3), 2)
        #Test case 5:
        self.assertEqual(fibfib(4), 3)
        #Test case 6:
        self.assertEqual(fibfib(5), 5)
        #Test case 7:
        self.assertEqual(fibfib(6), 8)
        #Test case 8:
        self.assertEqual(fibfib(7), 13)
        #Test case 9:
        self.assertEqual(fibfib(8), 21)
        #Test case 10:
        self.assertEqual(fibfib(9), 34)
        #Test case 11:
        self.assertEqual(fibfib(10), 55)
        #Test case 12:
        self.assertEqual(fibfib(11), 89)
        #Test case 13:
        self.assertEqual(fibfib(12), 144)
        #Test case 14:
        self.assertEqual(fibfib(13), 233)
        #Test case 15:
        self.assertEqual(fibfib(14), 3456)

Task_id: 64

class VowelsCountTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(vowels_count('abcd'), 0)

    def test_case_2(self):
        self.assertEqual(vowels_count('aeiou'), 5)

    def test_case_3(self):
        self.assertEqual(vowels_count('A'), 1)

    def test_case_4(self):
        self.assertEqual(vowels_count('Aa'), 2)

    def test_case_5(self):
        self.assertEqual(vowels_count('AaA'), 3)
   
Task_id: 65

class MyTest(unittest.TestCase):
    def test_0(self):
        self.assertEqual(circular_shift(123456789, 10), '987654321')
        self.assertEqual(circular_shift(123456789, 10), '987654321')
        self.assertEqual(circular_shift(1234567890, 10), '0987654321')
        self.assertEqual(circular_shift(1234567890, 10), '9876543210')
        self.assertEqual(circular_shift(12345678901, 10), '109876543210')

Task_id: 66

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(digitSum('abcd'), 0)

    def test_case_2(self):
        self.assertEqual(digitSum('ABCD'), 0)

    def test_case_3(self):
        self.assertEqual(digitSum('12345'), 15)

    def test_case_4(self):
        self.assertEqual(digitSum('123456'), 30)

    def test_case_5(self):
        self.assertEqual(digitSum('1234567'), 45)

   
Task_id: 67

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(fruit_distribution('1 2 3 4 5 6 7 8 9 10', 10), 0)

    def test_case_2(self):
        self.assertEqual(fruit_distribution('1 2 3 4 5 6 7 8 9 10', 10), 0)

    def test_case_3(self):
        self.assertEqual(fruit_distribution('1 2 3 4 5 6 7 8 9 10', 10), 0)

    def test_case_4(self):
        self.assertEqual(fruit_distribution('1 2 3 4 5 6 7 8 9 10', 10), 0)

    def test_case_5(self):
        self.assertEqual(fruit_distribution('1 2 3 4 5 6 7 8 9 10', 10), 0)

Task_id: 68

class SolutionTest(unittest.TestCase):
    def test_pluck(self):
        assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []
        assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 10]
        assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [11, 10]
        assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [13, 11]
        assert pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [14, 11]

Task_id: 69

class MyTest(unittest.TestCase):
    def test_case(self):
        pass

Task_id: 70

class MyTest(unittest.TestCase):
    def test_strange_sort_list(lst, res):
        assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 10, 2, 9, 3, 4, 5, 6, 7, 8]
        assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

Task_id: 71

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(triangle_area(2, 3, 4), 3.00)

    def test_case_2(self):
        self.assertEqual(triangle_area(1, 2, 3), 2.00)

    def test_case_3(self):
        self.assertEqual(triangle_area(1, 1, 1), 0.00)

    def test_case_4(self):
        self.assertEqual(triangle_area(1, 1, 2), 0.00)

    def test_case_5(self):
        self.assertEqual(triangle_area(1, 2, 3), 2.00)

Task_id: 72

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(will_it_fly([1, 1, 1], 3), True)

    def test_case_2(self):
        self.assertEqual(will_it_fly([1, 1, 1, 1], 3), True)

    def test_case_3(self):
        self.assertEqual(will_it_fly([1, 1, 1, 1, 1], 3), True)

    def test_case_4(self):
        self.assertEqual(will_it_fly([1, 1, 1, 1, 1, 1, 1], 3), True)

    def test_case_5(self):
        self.assertEqual(will_it_fly([1, 1, 1, 1, 1, 1, 1, 1, 1], 3), True)

Task_id: 73

class SolutionTest(unittest.TestCase):
    def test_smallest_change(self):
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 8
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 9
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 10
        assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 11

Task_id: 74

class SolutionTest(unittest.TestCase):
    def test_total_match(self):
        assert total_match(["abc", "def"], ["ghi", "jkl"]) == ["abc", "def"]
        assert total_match(["abc", "def"], ["ghi", "jkl", "mno"]) == ["abc", "def"]
        assert total_match(["abc", "def", "ghi"], ["jkl", "mno"]) == ["abc", "def", "ghi"]

Task_id: 75

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(is_multiply_prime(10),True)
        self.assertEqual(is_multiply_prime(15),True)
        self.assertEqual(is_multiply_prime(20),True)
        self.assertEqual(is_multiply_prime(25),True)
        self.assertEqual(is_multiply_prime(30),True)
        self.assertEqual(is_multiply_prime(35),True)
        self.assertEqual(is_multiply_prime(40),True)
        self.assertEqual(is_multiply_prime(45),True)
        self.assertEqual(is_multiply_prime(50),True)
        self.assertEqual(is_multiply_prime(55),True)
        self.assertEqual(is_multiply_prime(60),True)
        self.assertEqual(is_multiply_prime(65),True)
        self.assertEqual(is_multiply_prime(70),True)
        self.assertEqual(is_multiply_prime(75),True)
        self.assertEqual(is_multiply_prime(80),True)
        self.assertEqual(is_multiply_prime(85),True)
        self.assertEqual(is_multiply_prime(90),True)
        self.assertEqual(is_multiply_prime(95),True)

Task_id: 76

class SimplePowerTest(unittest.TestCase):
    def test_is_simple_power(self):
        self.assertTrue(is_simple_power(1, 1))
        self.assertTrue(is_simple_power(2, 2))

Task_id: 77

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(iscube(8), True)
    def test_2(self):
        self.assertEqual(iscube(27), True)
    def test_3(self):
        self.assertEqual(iscube(100), True)
    def test_4(self):
        self.assertEqual(iscube(101), False)

Task_id: 78

class HexKeyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(hex_key('2357B'), 4)
        self.assertEqual(hex_key('2357D'), 4)
        self.assertEqual(hex_key('2357B'), 4)
        self.assertEqual(hex_key('2357D'), 4)
        self.assertEqual(hex_key('2357BD'), 5)

Task_id: 79

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(decimal_to_binary(10), "db101db")
    def test_2(self):
        self.assertEqual(decimal_to_binary(11), "db1011db")
    def test_3(self):
        self.assertEqual(decimal_to_binary(12), "db1100db")
    def test_4(self):
        self.assertEqual(decimal_to_binary(13), "db1101db")
    def test_5(self):
        self.assertEqual(decimal_to_binary(14), "db1110db")

Task_id: 80

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(is_happy('abcd'), True)

    def test_case_2(self):
        self.assertEqual(is_happy('abcda'), False)

    def test_case_3(self):
        self.assertEqual(is_happy('abcdabcd'), True)

    def test_case_4(self):
        self.assertEqual(is_happy('abcdabcd'), False)

    def test_case_5(self):
        self.assertEqual(is_happy('abcdabcd'), True)

Task_id: 81


Task_id: 82

class PrimeLengthTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(prime_length('abc'), False)

    def test_case_2(self):
        self.assertEqual(prime_length('abcd'), True)

    def test_case_3(self):
        self.assertEqual(prime_length('abcde'), False)

    def test_case_4(self):
        self.assertEqual(prime_length('abcdef'), True)

    def test_case_5(self):
        self.assertEqual(prime_length('abcdefg'), False)


Task_id: 83

class PrimeLengthTest(unittest.TestCase):
    def test_starts_one_ends():
        assert starts_one_ends(1) == 1
        assert starts_one_ends(2) == 18
        assert starts_one_ends(3) == 18 * 10
        assert starts_one_ends(4) == 18 * 10 * 10
        assert starts_one_ends(5) == 18 * 10 * 10 * 10
        assert starts_one_ends(6) == 18 * 10 * 10 * 10 * 10
        assert starts_one_ends(7) == 18 * 10 * 10 * 10 * 10 * 10
        assert starts_one_ends(8) == 18 * 10 * 10 * 10 * 10 * 10 * 10
        assert starts_one_ends(9) == 18 * 10 * 10 * 10 * 10 * 10 * 10 * 10
        assert starts_one_ends(10) == 18 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10
        assert starts_one_ends(11) == 18 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10

Task_id: 84

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(solve(12345678901234567890), '10110010110101010110110101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101')

Task_id: 85

class MyTest(unittest.TestCase):
    def test_add(self):
        assert add([1, 2, 3, 4, 5]) == 10
        assert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30
        assert add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 3000

Task_id: 86

class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(anti_shuffle('a b c d e'), 'a b c d e')
        self.assertEqual(anti_shuffle('a b c d e a'), 'a b c d e a')
        self.assertEqual(anti_shuffle('a b c d e a b'), 'a b c d e a b')
        self.assertEqual(anti_shuffle('a b c d e a b c'), 'a b c d e a b c')
        self.assertEqual(anti_shuffle('a b c d e a b c d'), 'a b c d e a b c d')

Task_id: 87

class SolutionTest(unittest.TestCase):
    def test_get_row(self):
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 8) == [(1, 1), (0, 2)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 5) == [(0, 0), (1, 1)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 6) == [(0, 0), (1, 1)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 3) == [(0, 0), (1, 0)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 2) == [(0, 0), (1, 0)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 1) == [(0, 0), (1, 0)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 4) == [(0, 0), (1, 0)]
        assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]] , 7) == [(0, 0), (1, 0)]

Task_id: 88

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

Task_id: 89

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(encrypt('abcd'), 'efgh')
    def test_2(self):
        self.assertEqual(encrypt('abcdabcd'), 'efghefghe')
    def test_3(self):
        self.assertEqual(encrypt('abcdabcdabcd'), 'efghefgheefghe')
    def test_4(self):
        self.assertEqual(encrypt('abcdabcdabcdabcd'), 'efghefgheefgheefghe')
    def test_5(self):
        self.assertEqual(encrypt('abcdabcdabcdabcd'), 'efghefgheefgheefghe')

Task_id: 90

class MyTest(unittest.TestCase):
    def test_next_smallest(self):
        assert next_smallest([1, 2, 3, 4, 5]) == 2
        assert next_smallest([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 3
        assert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2
        assert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
        assert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 2

Task_id: 91

class MyTest(unittest.TestCase):
    def test_any_int(self):
        assert any_int(1,2,3) == False

Task_id: 92

Task_id: 93

class MyTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(encode('abcd'), 'BaCd')

    def test_case_2(self):
        self.assertEqual(encode('ABCD'), 'BaCd')

    def test_case_3(self):
        self.assertEqual(encode('12345'), '1a2b3c4d5e')

    def test_case_4(self):
        self.assertEqual(encode('123456789'), '1a2b3c4d5e6f7g8h9i0j')

    def test_case_5(self):
        self.assertEqual(encode('1234567890'), '1a2b3c4d5e6f7g8h9i0j1k')

Task_id: 94

class MyTest(unittest.TestCase):
    def test_skjkasdkd(self):
        pass

Task_id: 95

class MyTest(unittest.TestCase):
    def test_check_dict_case():
        assert check_dict_case({'a': 1, 'b': 2}) == True
        assert check_dict_case({'a': 1, 'B': 2}) == True
        assert check_dict_case({'a': 1, 'b': 2, 'C': 3}) == False
        assert check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False
        assert check_dict_case({'A': 1, 'B': 2, 'C': 3}) == True
        assert check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4}) == False
        assert check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}) == False


Task_id: 96

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(count_up_to(10), [2, 3, 5, 7])

    def test_case_2(self):
        self.assertEqual(count_up_to(15), [2, 3, 5, 7, 11, 13])

    def test_case_3(self):
        self.assertEqual(count_up_to(20), [2, 3, 5, 7, 11, 13, 17, 19, 23])

Task_id: 97

class multiply_Test(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(multiply(12, 15), 15)

    def test_case_2(self):
        self.assertEqual(multiply(12, 15), 15)

    def test_case_3(self):
        self.assertEqual(multiply(12, 15), 15)

    def test_case_4(self):
        self.assertEqual(multiply(12, 15), 15)

    def test_case_5(self):
        self.assertEqual(multiply(12, 15), 15)

Task_id: 98

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(count_upper('AEIOU'), 5)
        self.assertEqual(count_upper('AEIOUAEIOU'), 10)
        self.assertEqual(count_upper('AEIOUAEIOUAEIOU'), 15)
        self.assertEqual(count_upper('AEIOUAEIOUAEIOUAEIOU'), 20)
        self.assertEqual(count_upper('AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU'), 25)

Task_id: 99


class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(closest_integer('12.345'), 12)
        self.assertEqual(closest_integer('12.545'), 13)
        self.assertEqual(closest_integer('12.545'), 13)

Task_id: 100

class MyTest(unittest.TestCase):
    def test_make_a_pile(self):
        assert make_a_pile(0) == []
        assert make_a_pile(1) == [3]
        assert make_a_pile(2) == [3, 5]
        assert make_a_pile(3) == [3, 5, 7]
        assert make_a_pile(4) == [3, 5, 7, 9]

Task_id: 101



Task_id: 102

class ChooseNumTest(unittest.TestCase):
    def test_case_0(self):
        self.assertEqual(choose_num(1, 2), 2)

    def test_case_1(self):
        self.assertEqual(choose_num(2, 1), -1)

    def test_case_2(self):
        self.assertEqual(choose_num(2, 2), -1)

    def test_case_3(self):
        self.assertEqual(choose_num(3, 2), 2)

    def test_case_4(self):
        self.assertEqual(choose_num(4, 3), 3)

Task_id: 103

class ChooseNumTest(unittest.TestCase):
    def test_rounded_avg(self):
        self.assertEqual(rounded_avg(1, 10), 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111)

Task_id: 104

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(unique_digits([12, 13, 15, 17, 19, 21, 23, 25, 27, 29]), [13, 15, 17, 19, 21, 23, 25, 27, 29])

Task_id: 105

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]), ["Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), ["Ten","Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), ["Eleven","Ten","Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), ["Twelve","Eleven","Ten","Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), ["Thirteen","Twelve","Eleven","Ten","Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])
        self.assertEqual(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), ["Fourteen","Thirteen","Twelve","Eleven","Ten","Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"])

Task_id: 106

class ChooseNumTest(unittest.TestCase):
    def test_rounded_avg(self):
        assert f(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9] 

Task_id: 107

class ChooseNumTest(unittest.TestCase):
    def test_even_odd_palindrome(self):
        assert even_odd_palindrome(10) == (2, 4)
        assert even_odd_palindrome(100) == (25, 50)
        assert even_odd_palindrome(1000) == (333, 666)
        assert even_odd_palindrome(10000) == (4000, 5999)
        assert even_odd_palindrome(100000) == (49999, 50001)
        assert even_odd_palindrome(1000000) == (499999, 5000001)
        assert even_odd_palindrome(10000000) == (49999999, 50000001)
        assert even_odd_palindrome(10000000) == (499999999, 5000000001)

Task_id: 108

class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(count_nums([123, 456, 7890]), 2)
        self.assertEqual(count_nums([123, 456, 7890]), 2)
        self.assertEqual(count_nums([123, 456, 7890]), 1)
        self.assertEqual(count_nums([1234, 4567, 78901]), 2)
        self.assertEqual(count_nums([1234, 45678, 789012]), 2)

Task_id: 109

class SolutionTest(unittest.TestCase):
    def test_move_one_ball(self):
        assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True
        assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False
        assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False
        assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False
        assert move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == False

Task_id: 110

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        assert exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == "YES"
        assert exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10, 12]) == "YES"
        assert exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10, 12, 14]) == "YES"
        assert exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10, 12, 14, 16]) == "YES"

Task_id: 111

class SolutionTest(unittest.TestCase):
    def test_histogram(self):
        assert histogram("") == {}
        assert histogram("a") == {'a': 1}
        assert histogram("a b") == {'a': 1, 'b': 1}
        assert histogram("a b c") == {'a': 1, 'b': 1, 'c': 1}
        assert histogram("a b c d") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}
        assert histogram("a b c d e") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}
        assert histogram("a b c d e f") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}
        assert histogram("a b c d e f g") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}
        assert histogram("a b c d e f g h") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1}
        assert histogram("a b c d e f g h i") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}

Task_id: 112

class MyTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(reverse_delete('abcd',['b','c']),('ad',True))

    def test_2(self):
        self.assertEqual(reverse_delete('abcd',['b','c']),('ad',True))

    def test_3(self):
        self.assertEqual(reverse_delete('abcd',['b','c','d']),('a',True))

    def test_4(self):
        self.assertEqual(reverse_delete('abcd',['b','c','d','a']),('',True))

    def test_5(self):
        self.assertEqual(reverse_delete('abcd',['b','c','d','a','e']),('',False))


Task_id: 113

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(odd_count([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]), ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 2n the str2ng 2 of the 2nput.", "the number of odd elements 1n the str1ng 1 of the 1nput."])
        self.assertEqual(odd_count([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]), ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 2n the str2ng 2 of the 2nput.", "the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 1n the str1ng 1 of the 1nput."])
        self.assertEqual(odd_count([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o']]), ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 2n the str2ng 2 of the 2nput.", "the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 1n the str1ng 1 of the 1nput."])

Task_id: 114

Task_id: 115

class MyTest(unittest.TestCase):
    def test_max_fill(self):
        self.assertEqual(max_fill([[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                                    , 2), 6)
        self.assertEqual(max_fill([[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                                    , 3), 7)
        self.assertEqual(max_fill([[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                                , 4), 8)
        self.assertEqual(max_fill([[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                                    , 5), 9)
        self.assertEqual(max_fill([[1, 2, 3], [4, 5, 6], [7, 8, 9]]
                                , 6), 10)


Task_id: 116

class SolutionTest(unittest.TestCase):
    def test_case(self):
        pass

Task_id: 117

class SolutionTest(unittest.TestCase):
    def test_case():
        assert select_words("I have a pen and I have an apple", 1) == ['pen', 'apple']
        assert select_words("I have a pen and I have an apple", 2) == ['I']
        assert select_words("I have a pen and I have an apple", 3) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 4) == ['I']
        assert select_words("I have a pen and I have an apple", 5) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 6) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 7) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 8) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 9) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 10) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 11) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 12) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 13) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 14) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 15) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 16) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 17) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 18) == ['I', 'have']
        assert select_words("I have a pen and I have an apple", 19) == ['I', 'have']

Task_id: 118

class SolutionTest(unittest.TestCase):
    def test_get_closest_vowel(self):
        assert get_closest_vowel("aeiou") == "a"
        assert get_closest_vowel("aeiouy") == "y"
        assert get_closest_vowel("aeiouy") == "y"
        assert get_closest_vowel("aeiouy") == "y"
        assert get_closest_vowel("aeiouy") == "y"
        assert get_closest_vowel("aeiouy") == "y"
        assert get_closest_vowel("aeiouououy") == "y"
        assert get_closest_vowel("aeiououououy") == "y"
        assert get_closest_vowel("aeiouououououy") == "y"
        assert get_closest_vowel("aeiouououououy") == "y"
        assert get_closest_vowel("aeiououououy") == "y"
        assert get_closest_vowel("aeiouououououy") == "y"
        assert get_closest_vowel("aeiououououououy") == "y"
        assert get_closest_vowel("aeiouououououy") == "y"
        assert get_closest_vowel("aeiououououououy") == "y"
        assert get_closest_vowel("aeiouououououououy") == "y"
        assert get_closest_vowel("aeiouououououououououy") == "y"
        assert get_closest_vowel("aeiououououououououououououy") == "y"


Task_id: 119

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(match_parens(["((", "))"]), 'Yes')

    def test_case_2(self):
        self.assertEqual(match_parens(["((", "))", "((", "))"]), 'No')

    def test_case_3(self):
        self.assertEqual(match_parens(["((", "))", "((", "))"]), 'No')

    def test_case_4(self):
        self.assertEqual(match_parens(["((", "))", "((", "))", "((", "))"]), 'No')

    def test_case_5(self):
        self.assertEqual(match_parens(["((", "))", "((", "))", "((", "))", "((", "))", "((", "))"]), 'No')


Task_id: 120

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        k = 4
        expected_output = [10, 9, 8, 7]
        assert maximum(arr, k) == expected_output

    def test_case_2(self):
        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        k = 5
        expected_output = [10, 9, 8, 7, 6]
        assert maximum(arr, k) == expected_output

    def test_case_3(self):
        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        k = 6
        expected_output = [10, 9, 8, 7, 6, 5]
        assert maximum(arr, k) == expected_output

    def test_case_4(self):
        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        k = 7
        expected_output = [10, 9, 8, 7, 6, 5, 4]
        assert maximum(arr, k) == expected_output

    def test_case_5(self):
        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        k = 8
        expected_output = [10, 9, 8, 7, 6, 5, 4, 3]
        assert maximum(arr, k) == expected_output

Task_id: 121

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)

Task_id: 122

class MyTest(unittest.TestCase):
    def test_add_elements(self):
        assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 16
        assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 20
        assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 25
        assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 31
        assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 42

Task_id: 123

class Test(unittest.TestCase):
    def test(self):
        self.assertEqual(get_odd_collatz(1), [1])
        self.assertEqual(get_odd_collatz(2), [2])
        self.assertEqual(get_odd_collatz(3), [3])
        self.assertEqual(get_odd_collatz(4), [4])
        self.assertEqual(get_odd_collatz(5), [5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(6), [6, 3, 10, 5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(7), [7, 22, 11, 35, 17, 58, 29, 14, 7, 22, 11, 3, 10, 5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(8), [8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(9), [9, 3, 27, 10, 5, 16, 8, 4, 2, 1])
        self.assertEqual(get_odd_collatz(10), [10, 5, 16, 8, 4, 2, 1])

Task_id: 124

class MyTest(unittest.TestCase):
    def test_1(self):
        #Test case 1:
        assert valid_date('1-1-2000') == True
        #Test case 2:
        assert valid_date('13-1-2000') == False
        #Test case 3:
        assert valid_date('1-31-2000') == True
        #Test case 4:
        assert valid_date('2-29-2000') == True
        #Test case 5:
        assert valid_date('2-30-2000') == False

Task_id: 125

class MyTest(unittest.TestCase):
    def test_split_words(self):
        assert split_words("Hello World") == ["Hello", "World"]

Task_id: 126

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(is_sorted([1, 2, 3, 4, 5]), True)

    def test_case_2(self):
        self.assertEqual(is_sorted([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5]), True)

Task_id: 127

def test_intersection():
    assert intersection([1, 10], [5, 15]) == "YES"
    assert intersection([1, 10], [11, 20]) == "NO"
    assert intersection([1, 10], [11, 20]) == "NO"
    assert intersection([1, 10], [1, 10]) == "YES"

Task_id: 128

class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(prod_signs([-1, 2, 3, 4]), 24)
        self.assertEqual(prod_signs([-1, -2, -3, -4]), -24)
        self.assertEqual(prod_signs([1, 2, 3, 4]), 24)
        self.assertEqual(prod_signs([1, 2, 3, -4]), -24)
        self.assertEqual(prod_signs([-1, -2, 3, 4]), 24)

Task_id: 129


class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(minPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1]], 4), [1, 1, 1, 1])

Task_id: 130

class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(tri(0), [1])
        self.assertEqual(tri(1), [1,3])
        self.assertEqual(tri(2), [1,3,2])
        self.assertEqual(tri(3), [1,3,2,5])
        self.assertEqual(tri(4), [1, 3, 2, 5, 7])
        self.assertEqual(tri(5), [1, 3, 2, 5, 7, 11])
        self.assertEqual(tri(6), [1, 3, 2, 5, 7, 11, 14])
        self.assertEqual(tri(7), [1, 3, 2, 5, 7, 11, 14, 18])
        self.assertEqual(tri(8), [1, 3, 2, 5, 7, 11, 14, 18, 22])
        self.assertEqual(tri(9), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28])
        self.assertEqual(tri(10), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28, 35])
        self.assertEqual(tri(11), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28, 35, 42])
        self.assertEqual(tri(12), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28, 35, 42, 50])
        self.assertEqual(tri(13), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28, 35, 42, 50, 59])
        self.assertEqual(tri(14), [1, 3, 2, 5, 7, 11, 14, 18, 22, 28, 35, 42, 50, 59, 70])

Task_id: 131

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(digits(1234567890), 0)
        self.assertEqual(digits(1234567891), 31)
        self.assertEqual(digits(1234567892), 708)
        self.assertEqual(digits(12345678912), 22)
        self.assertEqual(digits(12345678913), 46)

Task_id: 132


class MyTest(unittest.TestCase):
    def test_is_nested(self):
        assert is_nested('[') == False
        assert is_nested('[[]]') == True
        assert is_nested('[[][]]') == True
        assert is_nested('[[][]]') == True
   
Task_id: 133

class MyTest(unittest.TestCase):
    def test_sum_squares(self):
        assert sum_squares([1, 2, 3, 4, 5]) == 130
        assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 380
        assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 1200
        assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]) == 2500

Task_id: 134

class MyTest(unittest.TestCase):
    def test_check_if_last_char_is_a_letter(self):
        assert check_if_last_char_is_a_letter("This is a test") == False
        assert check_if_last_char_is_a_letter("This is a test") == False
        assert check_if_last_char_is_a_letter("This is a test.") == False
        assert check_if_last_char_is_a_letter("This is a test!") == False
        assert check_if_last_char_is_a_letter("This is a test?") == False
        assert check_if_last_char_is_a_letter("This is a test.") == False
        assert check_if_last_char_is_a_letter("This is a test!") == False
        assert check_if_last_char_is_a_letter("This is a test?") == False
        assert check_if_last_char_is_a_letter("This is a test") == True
        assert check_if_last_char_is_a_letter("This is a test.") == True
        assert check_if_last_char_is_a_letter("This is a test!") == True
        assert check_if_last_char_is_a_letter("This is a test?") == True

Task_id: 135

class Tests(unittest.TestCase):
    def test_0(self):
        self.assertEqual(can_arrange([1, 2, 3, 4, 5]), 4)

    def test_1(self):
        self.assertEqual(can_arrange([1, 2, 3, 4, 5, 6]), 6)

    def test_2(self):
        self.assertEqual(can_arrange([1, 2, 3, 4, 5, 6, 7]), 7)

    def test_3(self):
        self.assertEqual(can_arrange([1, 2, 3, 4, 5, 6, 7, 8]), 8)

    def test_4(self):
        self.assertEqual(can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]), 9)

Task_id: 136


class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(largest_smallest_integers([1, 2, 3, -1, -2, -3]), (None, -3))
        self.assertEqual(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), (None, 1))
        self.assertEqual(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]), (-11, None))

Task_id: 137

class MyTest(unittest.TestCase):
    def test_0(self):
        self.assertEqual(compare_one(1, 2), 1)
    def test_1(self):
        self.assertEqual(compare_one(1, 1), None)
    def test_2(self):
        self.assertEqual(compare_one(1, 2), 1)
    def test_3(self):
        self.assertEqual(compare_one(1, 1), None)
    def test_4(self):
        self.assertEqual(compare_one(1, 2), 1)
    def test_5(self):
        self.assertEqual(compare_one(2, 1), 2)
    def test_6(self):
        self.assertEqual(compare_oneOne(2, 1), 2)
    def test_7(self):
        self.assertEqual(compare_one(2, 1), 2)
    def test_8(self):
        self.assertEqual(compare_one(1, 2), 1)
    def test_9(self):
        self.assertEqual(compare_oneOne(1, 2), None)
    def test_10(self):
        self.assertEqual(compare_oneOne(1, 1), None)
    def test_11(self):
        self.assertEqual(compare_oneOne(2, 1), 2)
    def test_12(self):
        self.assertEqual(compare_oneOne(1, 2), 1)
    def test_13(self):
        self.assertEqual(compare_oneOne(2, 1), 2)
    def test_14(self):
        self.assertEqual(compare_oneOne(1, 2), 1)
    def test_15(self):
        self.assertEqual(compare_oneOne(2, 1), 2)

Task_id: 138

class MyTest(unittest.TestCase):
    def test(self):
        assert is_equal_to_sum_even(10) == True
        assert is_equal_to_sum_even(11) == False
        assert is_equal_to_sum_even(12) == True
        assert is_equal_to_sum_even(13) == False
        assert is_equal_to_sum_even(14) == True
        assert is_equal_to_sum_even(15) == False
        assert is_equal_to_sum_even(16) == True
        assert is_equal_to_sum_even(17) == False
        assert is_equal_to_sum_even(18) == True
        assert is_equal_to_sum_even(19) == False
        assert is_equal_to_sum_even(20) == True
        assert is_equal_to_sum_even(21) == False
        assert is_equal_to_sum_even(22) == True
        assert is_equal_to_sum_even(23) == False
        assert is_equal_to_sum_even(24) == True
        assert is_equal_to_sum_even(25) == False
        assert is_equal_to_sum_even(26) == True
        assert is_equal_to_sum_even(27) == False
        assert is_equal_to_sum_even(28) == True
        assert is_equal_to_sum_even(29) == False
        assert is_equal_to_sum_even(30) == True
    

Task_id: 139

class MyTest(unittest.TestCase):
    def test_special_factorial(self):
        assert special_factorial(1) == 1
        assert special_factorial(2) == 2
        assert special_factorial(3) == 6
        assert special_factorial(4) == 24
        assert special_factorial(5) == 120

Task_id: 140

class MyTest(unittest.TestCase):
    def test_fix_spaces(self):
        assert fix_spaces("") == ""
        assert fix_spaces("a") == "a"
        assert fix_spaces("a b") == "a_b"
        assert fix_spaces("a b c") == "a_b_c"
        assert fix_spaces("a b c d") == "a_b_c_d"
        assert fix_spaces("a b c d e") == "a_b_c_d_e"
        assert fix_spaces("a b c d e f") == "a_b_c_d_e_f"
        assert fix_spaces("a b c d e f g") == "a_b_c_d_e_f_g"
        assert fix_spaces("a b c d e f g h") == "a_b_c_d_e_f_g_h"
        assert fix_spaces("a b c d e f g h i") == "a_b_c_d_e_f_g_h_i"

Task_id: 141

class MyTest(unittest.TestCase):
    def test_file_name_check(self):
        self.assertEqual(file_name_check('a.txt'), 'Yes')
        self.assertEqual(file_name_check('a1.txt'), 'Yes')
        self.assertEqual(file_name_check('a12.txt'), 'Yes')
        self.assertEqual(file_name_check('a123.txt'), 'Yes')
        self.assertEqual(file_name_check('a1234.txt'), 'No')
        self.assertEqual(file_name_check('a12345.txt'), 'No')
        self.assertEqual(file_name_check('a123456.txt'), 'No')
        self.assertEqual(file_name_check('a1234567.txt'), 'No')
        self.assertEqual(file_name_check('a12345678.txt'), 'No')
        self.assertEqual(file_name_check('a123456789.txt'), 'No')
        self.assertEqual(file_name_check('a1234567890.txt'), 'No')
        self.assertEqual(file_name_check('a12345678901.txt'), 'No')
        self.assertEqual(file_name_check('a123456789012.txt'), 'No')
        self.assertEqual(file_name_check('a123456789012.txt'), 'No')
        self.assertEqual(file_name_check('a1234567890123.txt'), 'No')
        self.assertEqual(file_name_check('a12345678901234.txt'), 'No')
        self.assertEqual(file_name_check('a123456789012345.txt'), 'No')

Task_id: 142


class MyTest(unittest.TestCase):
    def test_sum_squares(self):
        assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 300
        assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 12500

Task_id: 143


class WordsInSentence(unittest.TestCase):
    def test_case_0(self):
        self.assertEqual(words_in_sentence("This is a test case"), "This is a test")

    def test_case_1(self):
        self.assertEqual(words_in_sentence("This is a test case"), "This is a test")

    def test_case_2(self):
        self.assertEqual(words_in_sentence("This is a test case"), "This is a test")

    def test_case_3(self):
        self.assertEqual(words_in_sentence("This is a test case"), "This is a test")

    def test_case_4(self):
        self.assertEqual(words_in_sentence("This is a test case"), "This is a test")

Task_id: 144

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/2'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '2/1'), True)
    def test_case(self):
        self.assertEqual(simplify('1/2', '1/1'), True)


Task_id: 145

class SolutionTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(order_by_points([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

Task_id: 146

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(specialFilter([12, 13, 14, 15, 16, 17, 18, 19, 20]), 4)
        self.assertEqual(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]), 2)

Task_id: 147

class MyTest(unittest.TestCase):
    def test_get_max_triples(self):
        self.assertEqual(get_max_triples(10), 10)
        self.assertEqual(get_max_triples(100), 100)
        self.assertEqual(get_max_triples(1000), 1000)
        self.assertEqual(get_max_triples(10000), 10000)
        self.assertEqual(get_max_triples(100000), 100000)

Task_id: 148

class Test(unittest.TestCase):
    def test(self):
        self.assertEqual(bf("Earth", "Mars"), ("Venus", "Mercury"))
        self.assertEqual(bf("Mars", "Earth"), ("Venus", "Mercury"))
        self.assertEqual(bf("Mercury", "Venus"), ())
        self.assertEqual(bf("Venus", "Mercury"), ())
        self.assertEqual(bf("Mercury", "Mercury"), ())
        self.assertEqual(bf("Venus", "Venus"), ())
        self.assertEqual(bf("Mars", "Mars"), ())
        self.assertEqual(bf("Saturn", "Saturn"), ())
        self.assertEqual(bf("Saturn", "Jupiter"), ("Saturn", "Jupiter"))
        self.assertEqual(bf("Jupiter", "Saturn"), ("Jupiter", "Saturn"))
        self.assertEqual(bf("Jupiter", "Jupiter"), ())
        self.assertEqual(bf("Saturn", "Saturn"), ())
 
Task_id: 149

class Test(unittest.TestCase):
    def test_sorted_list_sum(self):
        assert sorted_list_sum(["abc", "de", "fgh", "de", "abcd", "efg", "cd"]) == ["de", "efg"]
        assert sorted_list_sum(["abc", "de", "fgh", "de", "abcd", "efg", "cd"]) == ["de", "efg"]
        assert sorted_list_sum(["abc", "de", "fgh", "de", "abcd", "efg", "cd"]) == ["de", "efg"]
        assert sorted_list_sum(["abc", "de", "fgh", "de", "abcd", "efg", "cd"]) == ["de", "efg"]
        assert sorted_list_sum(["abc", "de", "fgh", "de", "abcd", "efg", "cd"]) == ["de", "efg"]
   
Task_id: 150

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(x_or_y(1, 1, 2), 2)

    def test_case_2(self):
        self.assertEqual(x_or_y(2, 1, 2), 1)

    def test_case_3(self):
        self.assertEqual(x_or_y(3, 1, 2), 1)

    def test_case_4(self):
        self.assertEqual(x_or_y(4, 1, 2), 1)

    def test_case_5(self):
        self.assertEqual(x_or_y(5, 1, 2), 1)


Task_id: 151

class DoubleTheDifference(unittest.TestCase):
    def test_case_1(self):
        pass

Task_id: 152


class DoubleTheDifference(unittest.TestCase):
    def test_compare(self):
        game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        guess = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        assert compare(game,guess) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

        game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        guess = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        assert compare(game,guess) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

        game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        guess = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]
        assert compare(game,guess) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]

        game = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
        guess = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]
        assert compare(game,guess) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Task_id: 153

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(Strongest_Extension('A', ['A', 'B', 'C']), 'A.A')
        self.assertEqual(Strongest_Extension('B', ['A', 'B', 'C']), 'B.B')
        self.assertEqual(Strongest_Extension('C', ['A', 'B', 'C']), 'C.C')
        self.assertEqual(Strongest_Extension('D', ['A', 'B', 'C']), 'A.B')
        self.assertEqual(Strongest_Extension('E', ['A', 'B', 'C']), 'A.C')

Task_id: 154


Task_id: 155

class MyTest(unittest.TestCase):
    def test_even_odd_count(self):
        assert even_odd_count(12345) == (2, 3)
        assert even_odd_count(1234567890) == (10, 10)
        assert even_odd_count(-12345) == (2, 3)
        assert even_odd_count(-1234567890) == (10, 10)
        assert even_odd_count(0) == (1, 0)
        assert even_odd_count(1) == (0, 1)
        assert even_odd_count(10) == (1, 1)
        assert even_odd_count(100) == (2, 2)
        assert even_odd_count(1000) == (4, 4)
        assert even_odd_count(10000) == (5, 5)
        assert even_odd_count(10000) == (6, 6)
        assert even_odd_count(1000000) == (7, 7)
        assert even_odd_count(10000000) == (8, 8)
        assert even_odd_count(100000000) == (9, 9)
        assert even_odd_count(10000000000) == (10, 10)
        assert even_odd_count(1000000000000) == (11, 11)
        assert even_odd_count(1000000000000000) == (12, 12)
        assert even_odd_count(1000000000000000000) == (13, 13)

Task_id: 156

class SolutionTest(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(int_to_mini_roman(1994), 'mcmlxxxiv')

    def test_case_2(self):
        self.assertEqual(int_to_mini_roman(1995), 'mcmlxix')

    def test_case_3(self):
        self.assertEqual(int_to_mini_roman(1996), 'mcmlxvi')

    def test_case_4(self):
        self.assertEqual(int_to_mini_roman(1997), 'mcmlxvii')

    def test_case_5(self):
        self.assertEqual(int_to_mini_roman(1999), 'mcmxcix')


Task_id: 157


Task_id: 158

class MyTest(unittest.TestCase):
    def test_case(self):
        pass

Task_id: 159

class EatTest(unittest.TestCase):
    def test_eat(self):
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 10, 10), [10, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])
        self.assertEqual(eat(10, 5, 15), [15, 0])
        self.assertEqual(eat(10, 15, 5), [25, 0])

Task_id: 160

class DoAlgebraTest(unittest.TestCase):
    def test_1(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3]), 0)
    def test_2(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4]), 0)
    def test_3(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5]), 0)
    def test_4(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3]), 0)
    def test_5(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4]), 0)
    def test_6(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5]), 0)
    def test_7(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5, 6]), 0)
    def test_8(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5, 6, 7]), 0)
    def test_9(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5, 6, 7, 8]), 0)
    def test_10(self):
        self.assertEqual(do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5, 6, 7, 8, 9]), 0)


Task_id: 161

class MyTest(unittest.TestCase):
    def test_case(self):
        self.assertEqual(solve('abcd'), 'dcba')
        self.assertEqual(solve('1234'), '4321')
        self.assertEqual(solve('a1b2c3d4e5f6'), 'f6e5d4c3b2a1')
        self.assertEqual(solve(''), '')
        self.assertEqual(solve('A'), 'aA')
        self.assertEqual(solve('AB'), 'bBA')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')
        self.assertEqual(solve('ABCD'), 'dCBAD')

Task_id: 162

class TestProgram(unittest.TestCase):
    def test_case_1(self):
        text = 'abc'
        expected = '098f6bcd4621d373cade4e832627b4f6'
        self.assertEqual(expected, string_to_md5(text))

    def test_case_2(self):
        text = 'abcd'
        expected = 'e2fc714c4727ee9fb84242'
        self.assertEqual(expected, string_to_md5(text))

Task_id: 163

class GenerateIntegersTest(unittest.TestCase):
    def test_generate_integers(self):
        self.assertEqual(generate_integers(2, 4), [2, 4])
        self.assertEqual(generate_integers(3, 5), [4])
        self.assertEqual(generate_integers(1, 10), [2, 4, 6, 8, 10])
        self.assertEqual(generate_integers(10, 1), [10])
        self.assertEqual(generate_integers(1, 1), [1])
        self.assertEqual(generate_integers(10, 10), [])

Task_id: 164
