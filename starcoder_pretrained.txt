Task_id: 0

class Tests(unittest.TestCase):
    def test_has_close_elements(self):
        self.assertTrue(has_close_elements([1.0, 2.0, 3.0], 1.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], 2.0))
        self.assertTrue(has_close_elements([1.0, 2.0, 3.0], 0.5))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], 0.4))
        self.assertTrue(has_close_elements([1.0, 2.0, 3.0], 0.3))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], 0.2))
        self.assertTrue(has_close_elements([1.0, 2.0, 3.0], 0.1))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], 0.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], -1.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], -2.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], -3.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], -4.0))
        self.assertFalse(has_close_elements([1.0, 2.0, 3.0], -5.0))

Task_id: 1

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(separate_paren_groups("()"), [
            "(",
            ")",
        ])

    def test_2(self):
        self.assertEqual(separate_paren_groups("()()"), [
            "(",
            ")",
            "(",
            ")",
        ])

    def test_3(self):
        self.assertEqual(separate_paren_groups("((()))"), [
            "((",
            ")",
            "(",
            ")",
            "(",
            ")",
        ])

    def test_4(self):
        self.assertEqual(separate_paren_groups("((()))()"), [
            "((",
            ")",
            "(",
            ")",
            "(",
            ")",
            "(",
            ")",
        ])

    def test_5(self):
        self.assertEqual(separate_paren_groups("((()())))"), [
            "((",
            ")",
            "(",
            "(",
            ")",
            ")",
            "(",
            ")",
            "(",
            ")",
        ])

    def test_6(self):
        self.assertEqual(separate_paren_groups("((()()())))"), [
            "((",
            ")",
            "(",
            "(",
            "(",
            ")",
            ")",
            ")",
            "(",
            ")",
            "(",
            ")",
        ])

    def test_7(self):
        self.assertEqual(separate_paren_groups("((()()()())))"), [
            "((",
            ")",
            "(",
            "(",
            "(",
            "(",
            ")",
            ")",
            ")",
            ")",
            "(",
            ")",
            "(",
            ")",
        ])

Task_id: 2

class Tests(unittest.TestCase):
    def test_truncate_number(self):
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4), 0.0)
        self.assertEqual(truncate_number(4.0), 0.0)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)
        self.assertEqual(truncate_number(4.745), 0.745)

Task_id: 3

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertTrue(below_zero([1, 2, 3, 4, 5, 10, 60, -10, 100, -100]))

    def test_2(self):
        self.assertFalse(below_zero([1, 2, 3, 4, 5, 10, 60, 100, 1000, 10000]))

    def test_3(self):
        self.assertFalse(below_zero([1, 2, 3, 4, 5, 10, 60, 100, 1000, 10000, 100000]))

    def test_4(self):
        self.assertFalse(below_zero([1, 2, 3, 4, 5, 10, 60, 100, 1000, 10000, 100000, 1000000]))

    def test_5(self):
        self.assertFalse(below_zero([1, 2, 3, 4, 5, 10, 60, 100, 1000, 10000, 100000, 1000000, 10000000]))

    def test_6(self):
        self.assertFalse(below_zero([1, 2, 3, 4, 5, 10, 60, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]))
       
Task_id: 4

class Tests(unittest.TestCase):
    def test_mean_absolute_deviation(self):
        self.assertEqual(mean_absolute_deviation([1, 2, 3, 4, 5]), 1.5811388300841898)
        self.assertEqual(mean_absolute_deviation([1, 5, 5, 10, 15, 20, 20]), 5.142857142857143)
        self.assertEqual(mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 0.0)
        self.assertEqual(mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 100]), 18.181818181818183)

Task_id: 5

class Tests(unittest.TestCase):
    def test_intersperse(self):
        self.assertEqual(intersperse([1, 2, 3], 0), [1, 0, 2, 0, 3])
        self.assertEqual(intersperse([1, 2, 3], 1), [1, 1, 2, 1, 3])
        self.assertEqual(intersperse([1], 0), [1])
        self.assertEqual(intersperse([], 0), [])

Task_id: 6

class Tests(unittest.TestCase):
    def test_parse_nested_parens(self):
        self.assertEqual(parse_nested_parens

Task_id: 7

class Tests(unittest.TestCase):
    def test_filter_by_substring(self):
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'a'), ['a'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'b'), ['b'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'c'), ['c'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'd'), [])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], ''), ['a', 'b', 'c'])
        self.assertEqual(filter_by_substring([], 'a'), [])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'a'), ['a'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'b'), ['b'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'c'), ['c'])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], 'd'), [])
        self.assertEqual(filter_by_substring(['a', 'b', 'c'], ''), ['a', 'b', 'c'])
        self.assertEqual(filter_by_substring([], 'a'), [])

Task_id: 8

class Tests(unittest.TestCase):
    def test_sum_product(self):
        self.assertEqual(sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), (55, 3628800))
        self.assertEqual(sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), (210, 233501367968000))
        self.assertEqual(sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]), (3875, 137846528820))

Task_id: 9

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(rolling_max([1, 3, 5, 2, 4, 6]), [1, 3, 5, 5, 5, 6])

    def test_2(self):
        self.assertEqual(rolling_max([1, 2, 3, 4, 5, 6]), [1, 2, 3, 4, 5, 6])

    def test_3(self):
        self.assertEqual(rolling_max([6, 5, 4, 3, 2, 1]), [6, 6, 6, 6, 6, 6])

    def test_4(self):
        self.assertEqual(rolling_max([1, 2, 3, 4, 5, 1]), [1, 2, 3, 4, 5, 5])

    def test_5(self):
        self.assertEqual(rolling_max([1]), [1])

    def test_6(self):
        self.assertEqual(rolling_max([]), [])

Task_id: 10

class Tests(unittest.TestCase):
    def test_is_palindrome(self):
        self.assertTrue(is_palindrome(''))
        self.assertTrue(is_palindrome('a'))
        self.assertTrue(is_palindrome('aa'))
        self.assertTrue(is_palindrome('aba'))
        self.assertTrue(is_palindrome('abcba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccab'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
       
Task_id: 11

class Tests(unittest.TestCase):
    def test_string_xor(self):
        self.assertEqual(string_xor('0110', '0011'), '0101')
        self.assertEqual(string_xor('1011', '0101'), '1110')
        self.assertEqual(string_xor('1111', '0000'), '1111')
        self.assertEqual(string_xor('1010', '0101'), '1111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')
        self.assertEqual(string_xor('111010', '010101'), '101111')

Task_id: 12

class Tests(unittest.TestCase):
    def test_longest(self):
        self.assertEqual(longest(['a', 'ab', 'abc']), 'abc')
        self.assertEqual(longest(['a', 'ab', 'a', 'abc']), 'abc')

Task_id: 13

class Tests(unittest.TestCase):
    def test_greatest_common_divisor(self):
        self.assertEqual(greatest_common_divisor(12, 18), 6)
        self.assertEqual(greatest_common_divisor(12, 17), 1)
        self.assertEqual(greatest_common_divisor(12, 0), 12)
        self.assertEqual(greatest_common_divisor(0, 12), 12)
        self.assertEqual(greatest_common_divisor(0, 0), 0)

Task_id: 14

class Tests(unittest.TestCase):
    def test_all_prefixes(self):
        self.assertEqual(all_prefixes(''), [])
        self.assertEqual(all_prefixes('a'), ['a'])
        self.assertEqual(all_prefixes('ab'), ['a', 'ab'])
        self.assertEqual(all_prefixes('abc'), ['a', 'ab', 'abc'])

Task_id: 15

class Tests(unittest.TestCase):
    def test_string_sequence(self):
        self.assertEqual(string_sequence(1), '0 1')
        self.assertEqual(string_sequence(2), '0 1 1 2')
        self.assertEqual(string_sequence(3), '0 1 1 2 2 3')
        self.assertEqual(string_sequence(4), '0 1 1 2 2 3 3 4')
        self.assertEqual(string_sequence(5), '0 1 1 2 2 3 3 4 4 5')
        self.assertEqual(string_sequence(6), '0 1 1 2 2 3 3 4 4 5 5 6')
        self.assertEqual(string_sequence(7), '0 1 1 2 2 3 3 4 4 5 5 6 6 7')
        self.assertEqual(string_sequence(8), '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8')
        self.assertEqual(string_sequence(9), '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9')
        self.assertEqual(string_sequence(10), '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10')
        self.assertEqual(string_sequence(11), '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11')

Task_id: 16

class Tests(unittest.TestCase):
    def test_count_distinct_characters(self):
        self.assertEqual(count_distinct_characters('abc'), 3)
        self.assertEqual(count_distinct_characters('aA1+'), 4)
        self.assertEqual(count_distinct_characters(''), 0)
        self.assertEqual(count_distinct_characters('1234567890'), 10)
        self.assertEqual(count_distinct_characters('abcdefghijklmnopqrstuvwxyz'), 26)
        self.assertEqual(count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ'), 26)
        self.assertEqual(count_distinct_characters('1234567890!@#$%^&*()_+'), 26)
        self.assertEqual(count_distinct_characters('1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+'), 26)
        self.assertEqual(count_distinct_characters('1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+'), 26)
        self.assertEqual(count_distinct_characters('1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+1234567890!@#$%^&*()_+'), 26)

Task_id: 17

class Tests(unittest.TestCase):
    def test_parse_music(self):
        self.assertEqual(parse_music('o o| .|'), [4, 2, 1])
        self.assertEqual(parse_music('o o| .| o'), [4, 2, 1, 4])
        self.assertEqual(parse_music('o o| .| o o| .|'), [4, 2, 1, 4, 2, 1])
        self.assertEqual(parse_music('o o| .| o o| .| o o| .|'), [4, 2, 1, 4, 2, 1, 4, 2, 1])
        self.assertEqual(parse_music('o o| .| o o| .| o o| .| o o| .|'), [4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1])
        self.assertEqual(parse_music('o o| .| o o| .| o o| .| o o| .| o o| .|'), [4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1])
        self.assertEqual(parse_music('o o| .| o o| .| o o| .| o o| .| o o| .| o o| .|'), [4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1])

Task_id: 18

class Tests(unittest.TestCase):
    def test_how_many_times(self):
        self.assertEqual(how_many_times("abc", "a"), 2)
        self.assertEqual(how_many_times("abc", "b"), 1)
        self.assertEqual(how_many_times("abc", "c"), 1)
        self.assertEqual(how_many_times("abc", "d"), 0)
        self.assertEqual(how_many_times("abc", ""), 0)
        self.assertEqual(how_many_times("abc", "ab"), 1)
        self.assertEqual(how_many_times("abc", "abc"), 1)
        self.assertEqual(how_many_times("abc", "abcd"), 0)
        self.assertEqual(how_many_times("abc", "abcabc"), 2)
        self.assertEqual(how_many_times("abc", "abcabcabc"), 3)
        self.assertEqual(how_many_times("abc", "abcabcabcabc"), 4)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabc"), 5)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabc"), 6)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabcabc"), 7)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabcabcabc"), 8)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabcabcabcabc"), 9)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabcabcabcabcabc"), 10)
        self.assertEqual(how_many_times("abc", "abcabcabcabcabcabcabcabcabcabcabc"), 11)

Task_id: 19

class Tests(unittest.TestCase):
    def test_sort_numbers(self):
        self.assertEqual(sort_numbers('one two three'), 'one two three')
        self.assertEqual(sort_numbers('one two three four'), 'one two three four')
        self.assertEqual(sort_numbers('one two three four five'), 'five four three two one')
        self.assertEqual(sort_numbers('one two three four five six'), 'five four six three two one')
        self.assertEqual(sort_numbers('one two three four five six seven'), 'five four seven six three two one')
        self.assertEqual(sort_numbers('one two three four five six seven eight'), 'eight seven six five four three two one')
        self.assertEqual(sort_numbers('one two three four five six seven eight nine'), 'nine eight seven six five four three two one')

Task_id: 20

class Tests(unittest.TestCase):
    def test_find_closest_elements(self):
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5]), (1, 2))
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), (1, 2))
        self.assertEqual(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), (1, 2))

Task_id: 21

class Tests(unittest.TestCase):
    def test_rescale_to_unit(self):
        self.assertEqual(rescale_to_unit([1, 2, 3]), [0, 0.5, 1])
        self.assertEqual(rescale_to_unit([1, 2, 3, 4]), [0, 0.25, 0.5, 1])
        self.assertEqual(rescale_to_unit([1, 2, 3, 4, 5]), [0, 0.2, 0.4, 0.6, 1])
        self.assertEqual(rescale_to_unit([1, 2, 3, 4, 5, 6]), [0, 0.16666666666666666, 0.3333333333333333, 0.5, 0.6666666666666666, 1])
        self.assertEqual(rescale_to_unit([1, 2, 3, 4, 5, 6, 7]), [0, 0.14285714285714285, 0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857143, 1])

Task_id: 22

class Tests(unittest.TestCase):
    def test_filter_integers(self):
        self.assertEqual(filter_integers([1, 2, 3]), [1, 2, 3])
        self.assertEqual(filter_integers([1, 2, 'a', 3, 'b', 4]), [1, 2, 3, 4])
        self.assertEqual(filter_integers([1, 2, 'a', 3, 'b', 4, None, True, False]), [1, 2, 3, 4])

Task_id: 23

class Tests(unittest.TestCase):
    def test_basic(self):
        self.assertEqual(strlen('abc'), 3)
        self.assertEqual(strlen(''), 0)
        self.assertEqual(strlen('a'), 1)
        self.assertEqual(strlen('abc123'), 7)

Task_id: 24

class Tests(unittest.TestCase):
    def test_largest_divisor(self):
        self.assertEqual(largest_divisor(15), 3)
        self.assertEqual(largest_divisor(12), 4)
        self.assertEqual(largest_divisor(13), 1)
        self.assertEqual(largest_divisor(81), 9)

Task_id: 25

class Tests(unittest.TestCase):
    def test_factorize(self):
        self.assertEqual(factorize(1001), [7, 11, 13])
        self.assertEqual(factorize(14), [2, 7])
        self.assertEqual(factorize(1), [])
        self.assertEqual(factorize(10), [2, 5])

Task_id: 26

class Tests(unittest.TestCase):
    def test_remove_duplicates(self):
        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4, 5, 5]), [1, 2, 3, 4, 5])
        self.assertEqual(remove_duplicates([1, 1, 2, 3, 4, 4, 5, 5, 5, 5]), [1, 2, 3, 4, 5])

Task_id: 27

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(flip_case('hELLO'), 'Hello')

    def test_2(self):
        self.assertEqual(flip_case('HeLlO'), 'hELLO')

    def test_3(self):
        self.assertEqual(flip_case('sHoRt_AnD_tHiRs'), 'ShOrT_aND_tHIRS')

    def test_4(self):
        self.assertEqual(flip_case('WHAT_DO_YOU_SEE_HERE'), 'wHAT_dO_yOu_sEe_hERe')

    def test_5(self):
        self.assertEqual(flip_case('I_wANt_tO_fLIP_my_sPOnGe_BOB_iN_tHE_rOOF'), 'i_wAnT_tO_fLiP_My_sPoNGe_bOb_I_tHe_rOoF')

    def test_6(self):
        self.assertEqual(flip_case('WE_HAVE_NO_IDEA_WHAT_THE_QUESTION_IS_ABOUT'), 'wE_hAvE_nO_iDeA_wHaT_tHe_qUeStIoN_iS_aBoUt')

    def test_7(self):
        self.assertEqual(flip_case('WE_HAVE_NO_IDEA_WHAT_THE_QUESTION_IS_ABOUT'), 'wE_hAvE_nO_iDeA_wHaT_tHe_qUeStIoN_iS_aBoUt')

    def test_8(self):
        self.assertEqual(flip_case('WE_HAVE_NO_IDEA_WHAT_THE_QUESTION_IS_ABOUT'), 'wE_hAvE_nO_iDeA_wHaT_tHe_qUeStIoN_iS_aBoUt')

Task_id: 28

class Tests(unittest.TestCase):
    def test_concatenate(self):
        self.assertEqual(concatenate(['a', 'b', 'c']), 'abc')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd']), 'abcd')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e']), 'abcde')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f']), 'abcdef')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g']), 'abcdefg')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']), 'abcdefgh')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']), 'abcdefghi')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']), 'abcdefghij')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']), 'abcdefghijk')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']), 'abcdefghijkl')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']), 'abcdefghijklm')
        self.assertEqual(concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']), 'abcdefghijklmn')

Task_id: 29

class Tests(unittest.TestCase):
    def test_filter_by_prefix(self):
        self.assertEqual(filter_by_prefix(['a', 'b', 'c'], 'a'), ['a'])
        self.assertEqual(filter_by_prefix(['a', 'b', 'c'], 'b'), ['b'])
        self.assertEqual(filter_by_prefix(['a', 'b', 'c'], 'c'), ['c'])
        self.assertEqual(filter_by_prefix(['a', 'b', 'c'], 'd'), [])
        self.assertEqual(filter_by_prefix([], 'a'), [])

Task_id: 30


class Tests(unittest.TestCase):
    def test_get_positive(self):
        self.assertEqual(get_positive([1, -2, 3, -4, 5, -6, 7, 8, -9, 10]), [1, 3, 5, 7, 8, 10])
        self.assertEqual(get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), [])
        self.assertEqual(get_positive([]), [])
        self.assertEqual(get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), [1, 2, 3, 4, 5, 6, 7, 8, 9])
        self.assertEqual(get_positive([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]), [])
        self.assertEqual(get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]), [])
        self.assertEqual(get_positive([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]), [1, 2, 3, 4, 5, 6, 7, 8])

Task_id: 31

class Tests(unittest.TestCase):
    def test_is_prime(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertTrue(is_prime(5))
        self.assertTrue(is_prime(7))
        self.assertTrue(is_prime(11))
        self.assertTrue(is_prime(13))
        self.assertTrue(is_prime(17))
        self.assertTrue(is_prime(19))
        self.assertTrue(is_prime(23))
        self.assertTrue(is_prime(29))
        self.assertTrue(is_prime(31))
        self.assertTrue(is_prime(37))
        self.assertTrue(is_prime(41))
        self.assertTrue(is_prime(43))
        self.assertTrue(is_prime(47))
        self.assertTrue(is_prime(53))
        self.assertTrue(is_prime(59))
        self.assertTrue(is_prime(61))
        self.assertTrue(is_prime(67))
        self.assertTrue(is_prime(71))
        self.assertTrue(is_prime(73))
        self.assertTrue(is_prime(79))
        self.assertTrue(is_prime(83))
        self.assertTrue(is_prime(89))
        self.assertTrue(is_prime(97))
        self.assertTrue(is_prime(101))
        self.assertTrue(is_prime(103))
        self.assertTrue(is_prime(107))
        self.assertTrue(is_prime(109))
        self.assertTrue(is_prime(113))
        self.assertTrue(is_prime(127))
        self.assertTrue(is_prime(131))
        self.assertTrue(is_prime(137))
        self.assertTrue(is_prime(139))

Task_id: 32

class Tests(unittest.TestCase):
    def test_poly(self):
        self.assertAlmostEqual(poly([1, 2, 3], 0), 6)
        self.assertAlmostEqual(poly([1, 2, 3], 1), 11)
        self.assertAlmostEqual(poly([1, 2, 3], 2), 18)
        self.assertAlmostEqual(poly([1, 2, 3], 3), 30)
        self.assertAlmostEqual(poly([1, 2, 3], 4), 45)
        self.assertAlmostEqual(poly([1, 2, 3], 5), 63)
        self.assertAlmostEqual(poly([1, 2, 3], 6), 84)
        self.assertAlmostEqual(poly([1, 2, 3], 7), 108)
        self.assertAlmostEqual(poly([1, 2, 3], 8), 135)
        self.assertAlmostEqual(poly([1, 2, 3], 9), 165)
        self.assertAlmostEqual(poly([1, 2, 3], 10), 198)
        self.assertAlmostEqual(poly([1, 2, 3], 11), 234)
        self.assertAlmostEqual(poly([1, 2, 3], 12), 273)
        self.assertAlmostEqual(poly([1, 2, 3], 13), 315)
        self.assertAlmostEqual(poly([1, 2, 3], 14), 360)

Task_id: 33

class Tests(unittest.TestCase):
    def test_basic(self):
        self.assertEqual(sort_third([5, 1, 4, 3, 6, 8]), [1, 5, 3, 4, 8, 6])
        self.assertEqual(sort_third([1, 3, 5, 7]), [1, 3, 5, 7])
        self.assertEqual(sort_third([-51, 4, 3, 1, 2, 3, 4, 5, 6, 2, 1]), [-51, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6])
       
Task_id: 34

class Tests(unittest.TestCase):
    def test_unique(self):
        self.assertEqual(unique([1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]),0)

Task_id: 35

class Tests(unittest.TestCase):
    def test_max_element(self):
        self.assertEqual(max_element([1, 2, 3, 4, 5]), 5)
        self.assertEqual(max_element([5, 4, 3, 2, 1]), 5)
        self.assertEqual(max_element([1, 1, 1, 1, 1]), 1)
        self.assertEqual(max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 10]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 10]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 10, 10]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 10, 10, 10]), 10)
        self.assertEqual(max_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 10, 10, 10, 10]), 10)

Task_id: 36

class Tests(unittest.TestCase):
    def test_fizz_buzz(self):
        self.assertEqual(fizz_buzz(100), 1)
        self.assertEqual(fizz_buzz(1000), 10)
        self.assertEqual(fizz_buzz(10000), 100)
        self.assertEqual(fizz_buzz(100000), 1000)
        self.assertEqual(fizz_buzz(1000000), 10000)
        self.assertEqual(fizz_buzz(10000000), 100000)
        self.assertEqual(fizz_buzz(100000000), 1000000)
        self.assertEqual(fizz_buzz(1000000000), 10000000)
        self.assertEqual(fizz_buzz(10000000000), 100000000)
        self.assertEqual(fizz_buzz(100000000000), 1000000000)
        self.assertEqual(fizz_buzz(1000000000000), 10000000000)
        self.assertEqual(fizz_buzz(10000000000000), 100000000000)
        self.assertEqual(fizz_buzz(100000000000000), 1000000000000)

Task_id: 37

class Tests(unittest.TestCase):
    def test_basic(self):
        self.assertEqual(sort_even([1, 3, 5, 7, 2, 4, 6, 8]), [2, 4, 6, 8, 1, 3, 5, 7])
        self.assertEqual(sort_even([1, 3, 5, 7, 2, 4, 6, 8, 9]), [2, 4, 6, 8, 1, 3, 5, 7, 9])
        self.assertEqual(sort_even([1, 3, 5, 7, 2, 4, 6, 8, 9, 10]), [2, 4, 6, 8, 10, 1, 3, 5, 7, 9])
        self.assertEqual(sort_even([1, 3, 5, 7, 2, 4, 6, 8, 9, 10, 11]), [2, 4, 6, 8, 10, 1, 3, 5, 7, 9, 11])
        self.assertEqual(sort_even([1, 3, 5, 7, 2, 4, 6, 8, 9, 10, 11, 12]), [2, 4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11])

Task_id: 38

class Tests(unittest.TestCase):
    def test_encode_cyclic(self):
        self.assertEqual(encode_cyclic('abc'), '198,203,202')
        self.assertEqual(encode_cyclic('abcd'), '278,145,309,342')
        self.assertEqual(encode_cyclic('abcde'), '278,58,145,309,342')
        self.assertEqual(encode_cyclic('abcdef'), '278,145,309,342,760,58')
        self.assertEqual(encode_cyclic('abcdefg'), '278,145,309,342,760,58,617')
        self.assertEqual(encode_cyclic('abcdefgh'), '278,145,309,342,760,58,617,728')
        self.assertEqual(encode_cyclic('abcdefghi'), '278,145,309,342,760,58,617,728,777')
        self.assertEqual(encode_cyclic('abcdefghij'), '278,145,309,342,760,58,617,728,777,796')
        self.assertEqual(encode_cyclic('abcdefghijk'), '278,145,309,342,760,58,617,728,777,796,835')
        self.assertEqual(encode_cyclic('abcdefghijkl'), '278,145,309,342,760,58,617,728,777,796,835,894')

Task_id: 39

class Tests(unittest.TestCase):
    def test_prime_fib(self):
        self.assertEqual(prime_fib(1), 2)
        self.assertEqual(prime_fib(2), 3)
        self.assertEqual(prime_fib(3), 5)
        self.assertEqual(prime_fib(4), 7)
        self.assertEqual(prime_fib(5), 11)
        self.assertEqual(prime_fib(6), 13)
        self.assertEqual(prime_fib(7), 17)
        self.assertEqual(prime_fib(8), 19)
        self.assertEqual(prime_fib(9), 23)
        self.assertEqual(prime_fib(10), 29)
        self.assertEqual(prime_fib(11), 31)
        self.assertEqual(prime_fib(12), 37)
        self.assertEqual(prime_fib(13), 41)
        self.assertEqual(prime_fib(14), 43)
        self.assertEqual(prime_fib(15), 47)
        self.assertEqual(prime_fib(16), 53)
        self.assertEqual(prime_fib(17), 59)
        self.assertEqual(prime_fib(18), 61)
        self.assertEqual(prime_fib(19), 67)
        self.assertEqual(prime_fib(20), 71)
        self.assertEqual(prime_fib(21), 73)
        self.assertEqual(prime_fib(22), 79)

Task_id: 40


class Tests(unittest.TestCase):
    def test_1(self):
        self.assertTrue(triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97]))

Task_id: 41

class Tests(unittest.TestCase):
    def test_car_race_collision(self):
        self.assertEqual(car_race_collision(1), 1)
        self.assertEqual(car_race_collision(2), 4)
        self.assertEqual(car_race_collision(3), 9)
        self.assertEqual(car_race_collision(4), 16)
        self.assertEqual(car_race_collision(5), 25)
        self.assertEqual(car_race_collision(6), 36)
        self.assertEqual(car_race_collision(7), 49)
        self.assertEqual(car_race_collision(8), 64)
        self.assertEqual(car_race_collision(9), 81)
        self.assertEqual(car_race_collision(10), 100)

Task_id: 42

class Tests(unittest.TestCase):
    def test_incr_list(self):
        self.assertEqual(incr_list([1, 2, 3]), [2, 3, 4])
        self.assertEqual(incr_list([1, -1, 0]), [2, 0, 1])
        self.assertEqual(incr_list([-1, 0, 1]), [0, 1, 2])
        self.assertEqual(incr_list([]), [])
        self.assertEqual(incr_list([0]), [1])

Task_id: 43

class Tests(unittest.TestCase):
    def test_pairs_sum_to_zero(self):
        self.assertTrue(pairs_sum_to_zero([10, 20, 10, 30, 10, 50, 10, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))

Task_id: 44

class Tests(unittest.TestCase):
    def test_base_1(self):
        self.assertEqual(change_base(0, 1), "0")
        self.assertEqual(change_base(1, 1), "1")
        self.assertEqual(change_base(2, 1), "10")
        self.assertEqual(change_base(3, 1), "11")
        self.assertEqual(change_base(4, 1), "100")
        self.assertEqual(change_base(5, 1), "101")
        self.assertEqual(change_base(6, 1), "110")
        self.assertEqual(change_base(7, 1), "111")
        self.assertEqual(change_base(8, 1), "1000")
        self.assertEqual(change_base(9, 1), "1001")
        self.assertEqual(change_base(10, 1), "1010")
        self.assertEqual(change_base(11, 1), "1011")
        self.assertEqual(change_base(12, 1), "1100")
        self.assertEqual(change_base(13, 1), "1101")
        self.assertEqual(change_base(14, 1), "1110")
        self.assertEqual(change_base(15, 1), "1111")
        self.assertEqual(change_base(16, 1), "10000")
        self.assertEqual(change_base(17, 1), "10001")
        self.assertEqual(change_base(18, 1), "10010")
        self.assertEqual(change_base(19, 1), "10011")
        self.assertEqual(change_base(20, 1), "10100")

Task_id: 45

class Tests(unittest.TestCase):
    def test_triangle_area(self):
        """
        Test that we calculate the area of a triangle correctly
        """
        self.assertEqual(triangle_area(3, 2), 3)
        self.assertEqual(triangle_area(10, 5), 25)
        self.assertEqual(triangle_area(243, 144), 16326)
        self.assertEqual(triangle_area(1, 1), 0.5)
        self.assertEqual(triangle_area(0, 0), 0)
        self.assertEqual(triangle_area(1, 0), 0)
        self.assertEqual(triangle_area(0, 1), 0)
        self.assertEqual(triangle_area(1, -1), -0.5)
        self.assertEqual(triangle_area(-1, 1), -0.5)
        self.assertEqual(triangle_area(-1, -1), -0.5)
        self.assertEqual(triangle_area(0, -1), 0)
        self.assertEqual(triangle_area(-1, 0), 0)
        self.assertEqual(triangle_area(0, 0), 0)
        self.assertEqual(triangle_area(1, 1), 0.5)
        self.assertEqual(triangle_area(1, 2), 1)
        self.assertEqual(triangle_area(2, 1), 1)
        self.assertEqual(triangle_area(2, 2), 2)
        self.assertEqual(triangle_area(2, 3), 3)
        self.assertEqual(triangle_area(3, 2), 3)
        self.assertEqual(triangle_area(3, 3), 4.5)
        self.assertEqual(triangle_area(3, 4), 6)
        self.assertEqual(triangle_area(4, 3), 6)
        self.assertEqual(triangle_area(4, 4), 8)
        self.assertEqual(triangle_area(4, 5), 10)

Task_id: 46

class Tests(unittest.TestCase):
    def test_fib4(self):
        self.assertEqual(fib4(0), 0)
        self.assertEqual(fib4(1), 0)
        self.assertEqual(fib4(2), 2)
        self.assertEqual(fib4(3), 2)
        self.assertEqual(fib4(4), 4)
        self.assertEqual(fib4(5), 7)
        self.assertEqual(fib4(6), 13)
        self.assertEqual(fib4(7), 24)
        self.assertEqual(fib4(8), 44)
        self.assertEqual(fib4(9), 81)
        self.assertEqual(fib4(10), 149)
        self.assertEqual(fib4(11), 274)
        self.assertEqual(fib4(12), 504)
        self.assertEqual(fib4(13), 987)
        self.assertEqual(fib4(14), 1990)
        self.assertEqual(fib4(15), 3980)
        self.assertEqual(fib4(16), 8172)
        self.assertEqual(fib4(17), 16558)
        self.assertEqual(fib4(18), 33116)
        self.assertEqual(fib4(19), 66232)
        self.assertEqual(fib4(20), 132464)
        self.assertEqual(fib4(21), 264912)
        self.assertEqual(fib4(22), 529824)
        self.assertEqual(fib4(23), 1059648)

Task_id: 47

class Tests(unittest.TestCase):
    def test_median(self):
        self.assertEqual(median([1, 10, 2, 9, 5]), 5)
        self.assertEqual(median([3, 1, 3, 6, 7, 9]), 5.5)
        self.assertEqual(median([1, 3, 5]), 3)
        self.assertEqual(median([1, 3, 5, 4]), 3)
        self.assertEqual(median([1, 3, 5, 4, 2, 6]), 3)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7]), 4)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7, 8]), 4.5)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7, 8, 9]), 5)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7, 8, 9, 10]), 5.5)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7, 8, 9, 10, 11]), 6)
        self.assertEqual(median([1, 3, 5, 4, 2, 6, 7, 8, 9, 10, 11, 12]), 6.5)

Task_id: 48

class Tests(unittest.TestCase):
    def test_is_palindrome(self):
        self.assertTrue(is_palindrome(''))
        self.assertTrue(is_palindrome('a'))
        self.assertTrue(is_palindrome('aa'))
        self.assertTrue(is_palindrome('aba'))
        self.assertTrue(is_palindrome('abba'))
        self.assertTrue(is_palindrome('abcba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccab'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))
        self.assertTrue(is_palindrome('abccba'))

Task_id: 49

class Tests(unittest.TestCase):
    def test_modp(self):
        self.assertEqual(modp(0, 1000000007), 1)
        self.assertEqual(modp(1, 1000000007), 2)
        self.assertEqual(modp(2, 1000000007), 4)
        self.assertEqual(modp(3, 1000000007), 8)
        self.assertEqual(modp(4, 1000000007), 16)
        self.assertEqual(modp(5, 1000000007), 32)
        self.assertEqual(modp(6, 1000000007), 64)
        self.assertEqual(modp(7, 1000000007), 128)
        self.assertEqual(modp(8, 1000000007), 256)
        self.assertEqual(modp(9, 1000000007), 512)
        self.assertEqual(modp(10, 1000000007), 1024)
        self.assertEqual(modp(11, 1000000007), 2048)
        self.assertEqual(modp(12, 1000000007), 4096)
        self.assertEqual(modp(13, 1000000007), 8192)
        self.assertEqual(modp(14, 1000000007), 16384)

Task_id: 50

class Tests(unittest.TestCase):
    def test_encode_shift(self):
        self.assertEqual(encode_shift("hello"), "mjqqt")
        self.assertEqual(encode_shift("abc"), "def")
        self.assertEqual(encode_shift("xyz"), "yza")
        self.assertEqual(encode_shift("wxyz"), "vxzy")
        self.assertEqual(encode_shift("abcdefghijklmnopqrstuvwxyz"), "bcdefghijklmnopqrstuvwxyza")
        self.assertEqual(encode_shift("the quick brown fox jumps over the lazy dog"), "wklvgu hbynnfx lmxzivs wklvgu hbya")
        self.assertEqual(encode_shift("the quick brown fox jumps over the lazy dog."), "wklvgu hbynnfx lmxzivs wklvgu hbya.")

Task_id: 51

class Tests(unittest.TestCase):
    def test(self):
        self.assertEqual(remove_vowels("Hey, what's up?"), "Hyy, w'zt's p?")
        self.assertEqual(remove_vowels("Hello, my name is Peter."), "Hll, my nm s Prt.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")
        self.assertEqual(remove_vowels("I'm a programmer."), "M'  prgrmmr.")

Task_id: 52

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertTrue(below_threshold([1, 2, 3, 4, 5], 4))

    def test_2(self):
        self.assertTrue(below_threshold([1, 2, 3, 4, 5], 10))

    def test_3(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 0))

    def test_4(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 5))

    def test_5(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 1))

    def test_6(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 2))

    def test_7(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 3))

    def test_8(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 4))

    def test_9(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 5))

    def test_10(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 6))

    def test_11(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 7))

    def test_12(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 8))

    def test_13(self):
        self.assertFalse(below_threshold([1, 2, 3, 4, 5], 9))

   
Task_id: 53

class Tests(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(1, 2), 3)
        self.assertEqual(add(10, 20), 30)
        self.assertEqual(add(100, 200), 300)

Task_id: 54

class Tests(unittest.TestCase):
    def test_same_chars(self):
        self.assertTrue(same_chars('abc', 'abc'))
        self.assertTrue(same_chars('abc', 'cba'))
        self.assertTrue(same_chars('abc', 'abcabc'))
        self.assertTrue(same_chars('abc', 'abccba'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))
        self.assertTrue(same_chars('abc', 'abccab'))

Task_id: 55

class Tests(unittest.TestCase):
    def test_base_cases(self):
        self.assertEqual(fib(0), 0)
        self.assertEqual(fib(1), 1)
        self.assertEqual(fib(2), 1)
        self.assertEqual(fib(3), 2)
        self.assertEqual(fib(4), 3)
        self.assertEqual(fib(5), 5)
        self.assertEqual(fib(6), 8)
        self.assertEqual(fib(7), 13)
        self.assertEqual(fib(8), 21)
        self.assertEqual(fib(9), 34)
        self.assertEqual(fib(10), 55)
        self.assertEqual(fib(11), 89)
        self.assertEqual(fib(12), 144)
        self.assertEqual(fib(13), 233)
        self.assertEqual(fib(14), 377)
        self.assertEqual(fib(15), 610)
        self.assertEqual(fib(16), 987)
        self.assertEqual(fib(17), 1597)
        self.assertEqual(fib(18), 2584)
        self.assertEqual(fib(19), 4181)
        self.assertEqual(fib(20), 6765)
        self.assertEqual(fib(21), 10946)
        self.assertEqual(fib(22), 17711)
        self.assertEqual(fib(23), 28657)
        self.assertEqual(fib(24), 46368)
        self.assertEqual(fib(25), 75025)
        self.assertEqual(fib(26), 121393)
        self.assertEqual(fib(27), 196418)

Task_id: 56

class Tests(unittest.TestCase):
    def test_correct_bracketing(self):
        self.assertTrue(correct_bracketing("<>"))
        self.assertTrue(correct_bracketing("<<>>"))
        self.assertTrue(correct_bracketing("<<><>"))
        self.assertTrue(correct_bracketing(""))
        self.assertFalse(correct_bracketing("<>a>"))
        self.assertFalse(correct_bracketing("<<a>"))
        self.assertFalse(correct_bracketing("<<><>a"))
        self.assertFalse(correct_bracketing("a"))
        self.assertFalse(correct_bracketing("a<>"))
        self.assertFalse(correct_bracketing("a<>>"))
        self.assertFalse(correct_bracketing("a<<>>"))
        self.assertFalse(correct_bracketing("a<<><>"))
        self.assertFalse(correct_bracketing("a<"))
        self.assertFalse(correct_bracketing("<a>"))
        self.assertFalse(correct_bracketing("<<a"))
        self.assertFalse(correct_bracketing("<<>a"))
        self.assertFalse(correct_bracketing("<<><>a"))
        self.assertFalse(correct_bracketing("a<a>"))
        self.assertFalse(correct_bracketing("a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a<a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a<a<a<a<a>"))
        self.assertFalse(correct_bracketing("a<a<a<a<a<a<a<a<a>"))

Task_id: 57

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertTrue(monotonic([1, 2, 2, 3]))

    def test_2(self):
        self.assertTrue(monotonic([6, 5, 4, 4]))

    def test_3(self):
        self.assertTrue(monotonic([1, 3, 2]))

    def test_4(self):
        self.assertTrue(monotonic([1, 1, 1, 1]))

    def test_5(self):
        self.assertTrue(monotonic([1, 2, 3, 4]))

    def test_6(self):
        self.assertTrue(monotonic([1, 1, 2, 2]))

    def test_7(self):
        self.assertTrue(monotonic([1, 1, 1, 2]))

    def test_8(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 2]))

    def test_9(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1]))

    def test_10(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1, 2]))

    def test_11(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1]))

    def test_12(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 2]))

    def test_13(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1]))

    def test_14(self):
        self.assertTrue(monotonic([1, 1, 1, 1, 1, 1, 1, 2]))

Task_id: 58

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3]), [1, 2, 3])

    def test_2(self):
        self.assertEqual(common([1, 2, 3], [4, 5, 6]), [])

    def test_3(self):
        self.assertEqual(common([1, 2, 3], [1, 2]), [1, 2])

    def test_4(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4]), [1, 2, 3])

    def test_5(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4, 5]), [1, 2, 3])

    def test_6(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4, 5, 6]), [1, 2, 3])

    def test_7(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4, 5, 6, 7]), [1, 2, 3])

    def test_8(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8]), [1, 2, 3])

    def test_9(self):
        self.assertEqual(common([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]), [1, 2, 3])

Task_id: 59

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(largest_prime_factor(13195), 29)

Task_id: 60

class Tests(unittest.TestCase):
    def test_sum_to_n(self):
        self.assertEqual(sum_to_n(10), 55)
        self.assertEqual(sum_to_n(1), 1)
        self.assertEqual(sum_to_n(0), 0)
        self.assertEqual(sum_to_n(-1), 0)
        self.assertEqual(sum_to_n(1000), 500500)

Task_id: 61

class Tests(unittest.TestCase):
    def test_correct_bracketing(self):
        self.assertTrue(correct_bracketing("()"))
        self.assertTrue(correct_bracketing("()()"))
        self.assertTrue(correct_bracketing("(()(())())"))
        self.assertFalse(correct_bracketing(")"))
        self.assertFalse(correct_bracketing("("))
        self.assertFalse(correct_bracketing("(())("))

Task_id: 62

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(derivative([1, 1, 1]), [1, 1])
    def test_2(self):
        self.assertEqual(derivative([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]),
                         [1, -4, 9, -16, 25, -36, 49, -64, 81, -100])
    def test_3(self):
        self.assertEqual(derivative([0, 1, 0, 1]), [0, 0, 0])
    def test_4(self):
        self.assertEqual(derivative([0]), [0])
    def test_5(self):
        self.assertEqual(derivative([-10, -15, -100, -105, -1000, -1005]),
                         [-10, -30, -200, -210, -1000, -1010])

Task_id: 63

class Tests(unittest.TestCase):
    def test_fibfib(self):
        self.assertEqual(fibfib(0), 0)
        self.assertEqual(fibfib(1), 0)
        self.assertEqual(fibfib(2), 1)
        self.assertEqual(fibfib(3), 2)
        self.assertEqual(fibfib(4), 4)
        self.assertEqual(fibfib(5), 7)
        self.assertEqual(fibfib(6), 13)
        self.assertEqual(fibfib(7), 24)
        self.assertEqual(fibfib(8), 44)
        self.assertEqual(fibfib(9), 81)
        self.assertEqual(fibfib(10), 149)
        self.assertEqual(fibfib(11), 274)
        self.assertEqual(fibfib(12), 504)
        self.assertEqual(fibfib(13), 987)
        self.assertEqual(fibfib(14), 1771)
        self.assertEqual(fibfib(15), 3174)
        self.assertEqual(fibfib(16), 5741)
        self.assertEqual(fibfib(17), 10600)
        self.assertEqual(fibfib(18), 19502)
        self.assertEqual(fibfib(19), 35245)
        self.assertEqual(fibfib(20), 63245)
        self.assertEqual(fibfib(21), 113490)
        self.assertEqual(fibfib(22), 203650)
        self.assertEqual(fibfib(23), 373244)
        self.assertEqual(fibfib(24), 686570)
        self.assertEqual
Task_id: 64

class Tests(unittest.TestCase):
    def test_vowels_count(self):
        self.assertEqual(vowels_count('apple'), 2)
        self.assertEqual(vowels_count('banana'), 4)
        self.assertEqual(vowels_count('orange'), 3)
        self.assertEqual(vowels_count('mango'), 3)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)
        self.assertEqual(vowels_count('mangO'), 4)

Task_id: 65

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(circular_shift(12345, 1), '51234')

    def test_2(self):
        self.assertEqual(circular_shift(12345, 2), '45123')

    def test_3(self):
        self.assertEqual(circular_shift(12345, 3), '34512')

    def test_4(self):
        self.assertEqual(circular_shift(12345, 4), '23451')

    def test_5(self):
        self.assertEqual(circular_shift(12345, 5), '12345')

    def test_6(self):
        self.assertEqual(circular_shift(12345, 6), '12345')

    def test_7(self):
        self.assertEqual(circular_shift(12345, 7), '12345')

    def test_8(self):
        self.assertEqual(circular_shift(12345, 8), '12345')

    def test_9(self):
        self.assertEqual(circular_shift(12345, 9), '12345')

    def test_10(self):
        self.assertEqual(circular_shift(12345, 10), '12345')

    def test_11(self):
        self.assertEqual(circular_shift(12345, 11), '12345')

    def test_12(self):
        self.assertEqual(circular_shift(12345, 12), '12345')

Task_id: 66

class Tests(unittest.TestCase):
    def test_example(self):
        self.assertEqual(digitSum("nFfF"), 4)
        self.assertEqual(digitSum("Test123"), 8)
        self.assertEqual(digitSum("2k5H&"), 13)
        self.assertEqual(digitSum("Hello World"), 0)
        self.assertEqual(digitSum(""), 0)

Task_id: 67

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(fruit_distribution('20 10 10 2', 4), 0)
    def test_2(self):
        self.assertEqual(fruit_distribution('1 2 1', 4), 1)
    def test_3(self):
        self.assertEqual(fruit_distribution('1 2 1 1', 4), 0)
    def test_4(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1', 4), 0)
    def test_5(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1', 4), 0)
    def test_6(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1', 4), 0)
    def test_7(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1 1', 4), 0)
    def test_8(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1 1 1', 4), 0)
    def test_9(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1 1 1 1', 4), 0)
    def test_10(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1 1 1 1 1', 4), 0)
    def test_11(self):
        self.assertEqual(fruit_distribution('1 2 1 1 1 1 1 1 1 1 1 1', 4), 0)

Task_id: 68

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]), 0)

Task_id: 69

class Tests(unittest.TestCase):
    def test_search(self):
        self.assertEqual(search([1, 4, 4, 4, 4]), 4)
        self.assertEqual(search([1, 2, 3, 4, 5, 6, 10]), -1)
        self.assertEqual(search([1, 1, 2, 1, 1]), 1)
        self.assertEqual(search([1, 1, 1, 1, 1]), 1)

Task_id: 70

class Tests(unittest.TestCase):
    def test_strange_sort_list(self):
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 10, 8, 6, 4, 2, 9])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 10, 8, 6, 4, 2, 9])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 10, 8, 6, 4, 2, 9])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 10, 8, 6, 4, 2, 9])
        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 10, 8, 6, 4, 2, 9])

Task_id: 71


class Tests(unittest.TestCase):
    def test_triangle_area(self):
        self.assertEqual(triangle_area(2, 2, 5), 1.98)
        self.assertEqual(triangle_area(2, 2, 2), 1)
        self.assertEqual(triangle_area(2, 2, 3), -1)
        self.assertEqual(triangle_area(2, 2, 4), -1)
        self.assertEqual(triangle_area(2, 2, 5), 1.98)
        self.assertEqual(triangle_area(2, 2, 6), -1)
        self.assertEqual(triangle_area(2, 2, 7), -1)
        self.assertEqual(triangle_area(2, 2, 8), -1)
        self.assertEqual(triangle_area(2, 2, 9), -1)
        self.assertEqual(triangle_area(2, 2, 10), -1)
        self.assertEqual(triangle_area(2, 2, 11), -1)
        self.assertEqual(triangle_area(2, 2, 12), -1)
        self.assertEqual(triangle_area(2, 2, 13), -1)
        self.assertEqual(triangle_area(2, 2, 14), -1)
        self.assertEqual(triangle_area(2, 2, 15), -1)
        self.assertEqual(triangle_area(2, 2, 16), -1)
        self.assertEqual(triangle_area(2, 2, 17), -1)
        self.assertEqual(triangle_area(2, 2, 18), -1)

Task_id: 72

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 10))

    def test_2(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 11))

    def test_3(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 12))

    def test_4(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 13))

    def test_5(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 14))

    def test_6(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 15))

    def test_7(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 16))

    def test_8(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 17))

    def test_9(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 18))

    def test_10(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 19))

    def test_11(self):
        self.assertTrue(will_it_fly([1, 2, 3, 4], 20))

    def test_12(self):
        self.assertFalse(will_it_fly([1, 2, 3, 4], 21))

   
Task_id: 73

class Tests(unittest.TestCase):
    def test_1(self):
        self.assertEqual(smallest_change([1, 2, 3, 4, 5, 4, 3, 2, 1]), 0)

    def test_2(self):
        self.assertEqual(smallest_change([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]), 0)

    def test_3(self):
        self.assertEqual(smallest_change([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]), 0)

    def test_4(self):
        self.assertEqual(smallest_change([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]), 0)

Task_id: 74

class Tests(unittest.TestCase):
    def test_total_match(self):
        self.assertEqual(total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']), ['abc', 'def', 'ghi'])
        self.assertEqual(total_match(['abc', 'def', 'ghi'], ['abc', 'def', 'ghi', 'jkl']), ['abc', 'def', 'ghi'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl'], ['abc', 'def', 'ghi']), ['abc', 'def', 'ghi'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl'], ['abc', 'def', 'ghi', 'jkl']), ['abc', 'def', 'ghi', 'jkl'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl'], ['abc', 'def', 'ghi', 'jkl', 'mno']), ['abc', 'def', 'ghi', 'jkl'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl', 'mno'], ['abc', 'def', 'ghi', 'jkl']), ['abc', 'def', 'ghi', 'jkl'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl', 'mno'], ['abc', 'def', 'ghi', 'jkl', 'mno']), ['abc', 'def', 'ghi', 'jkl', 'mno'])
        self.assertEqual(total_match(['abc', 'def', 'ghi', 'jkl', 'mno'], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']), ['abc', 'def', 'ghi', 'jkl', 'mno'])

Task_id: 75

class Tests(unittest.TestCase):
    def test_is_multiply_prime(self):
        self.assertTrue(is_multiply_prime(4))
        self.assertTrue(is_multiply_prime(9))
        self.assertTrue(is_multiply_prime(504))
        self.assertTrue(is_multiply_prime(34329))
        self.assertTrue(is_multiply_prime(343290))
        self.assertTrue(is_multiply_prime(3432900))
        self.assertTrue(is_multiply_prime(34329000))
        self.assertTrue(is_multiply_prime(343290000))
        self.assertTrue(is_multiply_prime(3432900000))
        self.assertTrue(is_multiply_prime(34329000000))
        self.assertTrue(is_multiply_prime(343290000000))
        self.assertTrue(is_multiply_prime(3432900000000))
        self.assertTrue(is_multiply_prime(34329000000000))
        self.assertTrue(is_multiply_prime(343290000000000))
        self.assertTrue(is_multiply_prime(3432900000000000))
        self.assertTrue(is_multiply_prime(34329000000000000))

Task_id: 76

class Tests(unittest.TestCase):
    def test_is_simple_power(self):
        self.assertTrue(is_simple_power(1, 1))
        self.assertTrue(is_simple_power(8, 2))
        self.assertTrue(is_simple_power(125, 5))
        self.assertFalse(is_simple_power(10, 10))
        self.assertFalse(is_simple_power(31, 2))
        self.assertFalse(is_simple_power(100, 10))
        self.assertFalse(is_simple_power(1000, 10))
        self.assertFalse(is_simple_power(10000, 10))
        self.assertFalse(is_simple_power(100000, 10))
        self.assertFalse(is_simple_power(1000000, 10))
        self.assertFalse(is_simple_power(10000000, 10))
        self.assertFalse(is_simple_power(100000000, 10))
        self.assertFalse(is_simple_power(1000000000, 10))
        self.assertFalse(is_simple_power(10000000000, 10))
        self.assertFalse(is_simple_power(100000000000, 10))
        self.assertFalse(is_simple_power(1000000000000, 10))
        self.assertFalse(is_simple_power(10000000000000, 10))
        self.assertFalse(is_simple_power(100000000000000, 10))

Task_id: 77

class Tests(unittest.TestCase):
    def test_is_cube(self):
        self.assertTrue(is_cube(27))
        self.assertTrue(is_cube(64))
        self.assertTrue(is_cube(125))
        self.assertFalse(is_cube(10))
        self.assertFalse(is_cube(143))
        self.assertFalse(is_cube(120))
        self.assertFalse(is_cube(1))

Task_id: 78

class Tests(unittest.TestCase):
    def test(self):
        self.assertEqual(hex_key('1A2B3C4D5E6F'), 3)
        self.assertEqual(hex_key('77553311'), 0)
        self.assertEqual(hex_key('A1B2C3D4E5F6'), 6)
        self.assertEqual(hex_key('1234567890ABCDEF'), 16)
        self.assertEqual(hex_key('1234567890ABCDEF1234567890ABCDEF'), 32)
        self.assertEqual(hex_key('1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF'), 64)

Task_id: 79


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 80


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 81


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 82


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 83


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 84


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 85


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 86


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 87


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 88


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 89


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 90


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 91


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 92


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 93


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 94


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 95


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 96


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 97


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 98


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 99


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 100


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 101


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 102


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 103


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 104


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 105


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 106


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 107


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 108


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 109


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 110


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 111


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 112


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 113


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 114


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 115


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 116


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 117


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 118


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 119


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 120


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 121


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 122


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 123


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 124


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 125


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 126


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 127


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 128


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 129


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 130


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 131


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 132


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 133


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 134


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 135


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 136


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 137


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 138


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 139


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 140


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 141


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 142


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 143


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 144


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 145


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 146


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 147


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 148


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 149


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 150


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 151


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 152


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 153


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 154


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 155


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 156


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 157


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 158


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 159


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 160


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 161


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 162


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
Task_id: 163


# Unit tests for the above function
import unittest

class Tests(unittest.TestCase):
